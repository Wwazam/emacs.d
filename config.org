#+TITLE:My Emacs Config
#+PROPERTY: header-args :tangle yes

~C-c ;~ to comment out unwanted section
* Settings
** Defaults
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(line-number-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)

(fset 'yes-or-no-p 'y-or-n-p)
(setq help-window-select t)
(setq vc-follow-symlinks "Follow link")
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
(recentf-mode 1)
(setq Man-notify-method 'pushy)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq initial-scratch-message "")
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; mouse cursor
(mouse-avoidance-mode 'none)
;; start server if not started
(require 'server)
(unless (server-running-p) (server-start))

(setq gc-cons-threshold 20000000)

(add-to-list 'safe-local-eval-forms '(reopen-as-yadm))

(if (eq system-type 'gnu/linux)
    (setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program "chromium"))

#+END_SRC
** User Defined Functions
#+BEGIN_SRC emacs-lisp
(defun peter/switch-buffer ()
  "switch to last buffer"
  (interactive)
  (if (evil-alternate-buffer)
      (switch-to-buffer (car (evil-alternate-buffer)))
    (switch-to-buffer (other-buffer (current-buffer) t))))

(defun peter/edit-config-file ()
  "edit config file"
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(defun peter/recompile-all-packages ()
  (interactive)
  (byte-recompile-directory package-user-dir nil 'force))

;; close window after kill buffer command
(advice-add 'kill-this-buffer :after #'delete-window)

(defun peter/split-vertically ()
  "Split window vertically and focus"
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun peter/split-horizontally ()
  "Split window horizontally and focus"
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(defun peter/widen ()
  "after widen scroll down"
  (interactive)
  (widen)
  (scroll-down 8))

(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun peter/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))
#+END_SRC
* Bindings
** General
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-create-definer my/leader
			  :states '(normal motion emacs)
			  :keymaps 'global
			  :prefix "SPC"
			  :non-normal-prefix "M-SPC")
  (general-create-definer my/leader-mode
			  :states '(normal motion emacs)
			  :prefix "SPC"
			  :non-normal-prefix "M-SPC"))
(my/leader
 "fs" 'save-buffer
 "fa" 'add-file-local-variable-prop-line
 "he" 'elisp-index-search
 "qq" 'delete-frame
 "qQ" 'save-buffers-kill-emacs
 ;;window management
 "wv" 'peter/split-horizontally
 "ws" 'peter/split-vertically
 "ww" 'other-window
 "wd" 'delete-window
 ;;file access
 "fed" 'peter/edit-config-file
 "cc" 'flycheck-mode
 "r" 'deer
 "cl" 'evilnc-comment-or-uncomment-lines
 "TAB" 'peter/switch-buffer
 )
#+END_SRC
** Evil Mode
*** Evil General
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (setq evil-insert-state-map (make-sparse-keymap))
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
  (evil-define-key 'motion help-mode-map (kbd "<tab>") 'forward-button)
  (evil-define-key 'motion help-mode-map (kbd "S-<tab>") 'backward-button))


(setq evil-normal-state-tag "N"
      evil-insert-state-tag "I"
      evil-motion-state-tag "M"
      evil-emacs-state-tag  "E"
      evil-visual-state-tag "V"
      evil-motion-state-cursor	'(box "#663399")
      evil-normal-state-cursor	'(box "YellowGreen")
      evil-insert-state-cursor	'(bar "#F86155")
      evil-emacs-state-cursor	'(bar "SkyBlue2")
      evil-visual-state-cursor	'(box "gray"))
#+END_SRC
*** Evil State
[[https://github.com/bling/dotemacs/blob/master/config/init-evil.el][dotemacs/init-evil.el at master Â· bling/dotemacs]]
#+BEGIN_SRC emacs-lisp
(defvar peter/motion-state-modes
  '(special-mode go-guru-output-mode racer-help-mode helpful-mode
		 intero-help-mode))

(defvar peter/emacs-state-modes
  '(artist-mode dired-mode ivy-occur-mode view-mode debugger-mode
		intero-repl-mode org-wiki-panel-minor-mode elfeed-search-mode
		elfeed-show-mode finder-mode image-mode))

(defvar peter/emacs-state-minor-modes
  '(edebug-mode))

(cl-loop for mode in peter/motion-state-modes
	 do (add-to-list 'evil-motion-state-modes mode))

(cl-loop for mode in peter/emacs-state-modes
	 do (add-to-list 'evil-emacs-state-modes mode))

(cl-loop for mode in peter/emacs-state-modes
	 do (add-to-list 'evil-emacs-state-modes mode))

(cl-loop for mode in peter/emacs-state-minor-modes
	 do (let ((hook (concat (symbol-name mode) "-hook")))
	      (add-hook (intern hook) `(lambda ()
					 (if ,mode
					     (evil-emacs-state)
					   (evil-normal-state))))))
#+END_SRC
*** Evil Magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :ensure t
  :config
  ;; Open commit message with insert state
  (add-hook 'git-commit-mode-hook 'evil-insert-state))
#+END_SRC
*** Evil Nerd Commenter
text object ~c~ as comment
operator ~,,~ as comment
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :config
  (evilnc-default-hotkeys))
#+END_SRC
*** Evil Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC
*** COMMENT Evil MC
=grm= make all cursors
=gru= remove all cursors
=grj= next match
=grk= previous match
visual mode:
=C-n= next match
=C-p= previous match
=C-t= skip match
#+BEGIN_SRC emacs-lisp
(use-package evil-mc
  :ensure t
  :diminish evil-mc-mode
  :config
  (global-evil-mc-mode 1))
#+END_SRC
* Looks/Feels
** Mode Line
*** Smart Mode Line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (setq sml/no-confirm-load-theme t
	sml/theme 'respectful
	sml/mode-width 'full
	sml/vc-mode-show-backend t
	projectile-mode-line nil
	)
  :config
  (sml/setup))

(setq evil-mode-line-format '(before . mode-line-front-space))

(setq-default mode-line-format
	      '("%e"
		mode-line-front-space
		" "
		(:eval (eyebrowse-mode-line-indicator))
		;mode-line-mule-info
		mode-line-client
		mode-line-modified
		mode-line-auto-compile
		mode-line-remote
		mode-line-frame-identification
		" "
		mode-line-buffer-identification
		sml/pos-id-separator
		" "
		(vc-mode vc-mode)
          " "
		mode-line-modes
		;mode-line-misc-info
		sml/pre-modes-separator
		mode-line-position
		"(%l:%c)"
		mode-line-end-spaces
		))
#+END_SRC
** Themes
[[https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr][Emacs daemon and theme]]
[[https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr/34697306#34697306][follow up solution]]
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/Sync")
    (use-package doom-themes
      :load-path "~/Sync/site-lisp/doom-themes/")
  (use-package doom-themes :ensure t))

(use-package solarized-theme :ensure t)

(setq my:theme-index 0)
(setq my:theme-list
      '(doom-tomorrow-night adwaita solarized-light))

(defun my:enabled-themes ()
      (delete 'smart-mode-line-respectful
	      custom-enabled-themes))

(defun my:clear-theme ()
  (interactive)
  (mapcar #'disable-theme (my:enabled-themes)))

(defun my:switch-theme ()
  (interactive)
  (mapcar #'disable-theme (my:enabled-themes))
  (setq my:theme-index (% (1+ my:theme-index) (length my:theme-list)))
  (setq my:theme (nth my:theme-index my:theme-list))
  (load-theme my:theme :no-confirm))

(my/leader "u" 'my:switch-theme)

(setq my:theme (nth my:theme-index my:theme-list))
(defvar my:theme-window-loaded nil)
(defvar my:theme-terminal-loaded nil)

(if (daemonp)
    (add-hook 'after-make-frame-functions(lambda (frame)
					   (select-frame frame)
					   (if (window-system frame)
					       (unless my:theme-window-loaded
						 (if my:theme-terminal-loaded
						     (enable-theme my:theme)
						   (load-theme my:theme t))
						 (setq my:theme-window-loaded t))
					     (unless my:theme-terminal-loaded
					       (if my:theme-window-loaded
						   (enable-theme my:theme)
						 (load-theme my:theme t))
					       (setq my:theme-terminal-loaded t)))))

  (progn
    (load-theme my:theme t)
    (if (display-graphic-p)
	(setq my:theme-window-loaded t)
      (setq my:theme-terminal-loaded t))))
#+END_SRC
* Interface
** Completion Framework
*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package flx :ensure t)

(use-package counsel
  :ensure t
  :diminish ivy-mode ivy-minor-mode
  :config
  (ivy-mode 1)
  ;; (setq ivy-re-builders-alist
  ;; 	'((t . ivy--regex-fuzzy)))
  (setq ivy-use-virtual-buffers t
	enable-recursive-minibuffers t
	ivy-initial-inputs-alist nil
	ivy-count-format "%d/%d "))

(defun ivy-open-other-window (x)
  (find-file-other-window x))

(ivy-set-actions t '(("i" ivy-open-other-window "open other window")))

(use-package ivy-rich
  :ensure t
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
  (setq ivy-virtual-abbreviate 'full
	ivy-rich-switch-buffer-align-virtual-buffer t)
  (setq ivy-rich-abbreviate-paths t))

;; for edit in C-c C-o
(use-package wgrep :ensure t)

;; (use-package all-the-icons-ivy :ensure t
;;   :config
;;   (all-the-icons-ivy-setup))
#+END_SRC
**** Ivy Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "s-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f1> b") 'counsel-descbinds)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
(my/leader
  "ag" 'counsel-ag
  "`"  'ivy-switch-buffer
  "d"  'counsel-yank-pop
  "m"  'counsel-mark-ring
  "s"  'swiper
  "bb" 'ibuffer
  "pp" 'projectile-switch-project
  "pf" 'projectile-find-file-dwim
  "i"  'ivy-imenu-anywhere
  "fl" 'imenu-anywhere
  "gg" 'counsel-git-grep
  "ff" 'counsel-find-file
  "vv"  'ivy-push-view
  "vo" 'ivy-pop-view)

(define-key ivy-minibuffer-map (kbd "C-l") 'ivy-backward-delete-char)
#+END_SRC
**** Packages Compatibility
#+BEGIN_SRC emacs-lisp
(setq magit-completing-read-function 'ivy-completing-read)
(setq projectile-completion-system 'ivy)
#+END_SRC
*** Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (define-key company-active-map (kbd "C-n") #'company-select-next-or-abort)
  (define-key company-active-map (kbd "C-p") #'company-select-previous-or-abort)
  (define-key company-active-map (kbd "C-h") #'company-quickhelp-manual-begin))

(use-package company-quickhelp
  :ensure t
  :config
  (company-quickhelp-mode 1)
  (setq company-quickhelp-delay nil))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :ensure t
  :config
  (yas-global-mode 1)
  (my/leader
    "yn" 'yas-new-snippet
    "yv" 'yas-visit-snippet-file
    "yt" 'yas-describe-tables
    "yi" 'yas-insert-snippet))
#+END_SRC
** Window Control
*** Popwin
popup window for better experience
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :ensure t
  :config
  (setq popwin:popup-window-height 15)
  (global-set-key (kbd "C-`") popwin:keymap)
  (define-key popwin:keymap "q" 'popwin:close-popup-window)
  (popwin-mode 1))

(defvar my:popup-config
  '(("*Backtrace*" :regexp nil)
    ("*warnings*" :regexp nil)
    ("*Youdao Dictionary*" :regexp nil)
    (" *undo-tree*" :position bottom)
    (" *undo-tree Diff*" :position bottom)
    ("*HS-Error*" :position bottom)
    ("*Gofmt Errors*" :position bottom)
    ("*Buffer List*" :position bottom)
    ("*godoc <at point>*" :position bottom)
    ("*Go Test*" :position bottom)
    (vc-mode :noselect nil)
    (compilation-mode :noselect nil)
    (go-guru-output-mode :noselect nil)
    (racer-help-mode :noselect nil)
    (intero-help-mode :noselect nil)
    (helpful-mode :noselect nil)))

(cl-loop for conf in my:popup-config
	 do (push conf popwin:special-display-config))
#+END_SRC
*** Eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :init
  (setq eyebrowse-keymap-prefix (kbd "C-c C-b"))
  :config
  (eyebrowse-mode t)
  (global-set-key (kbd "M-p") 'eyebrowse-prev-window-config)
  (global-set-key (kbd "M-n") 'eyebrowse-next-window-config)
  (global-set-key (kbd "<M-tab>") 'eyebrowse-last-window-config)
  (global-set-key (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
  (global-set-key (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
  (global-set-key (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
  (global-set-key (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
  (global-set-key (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
  (global-set-key (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
  (global-set-key (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
  (global-set-key (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
  (global-set-key (kbd "M-9") 'eyebrowse-switch-to-window-config-9)
  )
#+END_SRC
*** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (global-set-key (kbd "M-`") 'ace-window))
#+END_SRC
** Editing
*** ISpell
#+BEGIN_SRC emacs-lisp
;; spell check world
(global-set-key (kbd "C-\\") 'ispell-word)
#+END_SRC
*** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC
*** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (define-key paredit-mode-map (kbd "C-j") 'eval-print-last-sexp))

(defvar peter/paredit-modes
  '(emacs-lisp-mode
    eval-expression-minibuffer-setup
    ielm-mode
    lisp-mode
    lisp-interaction-mode
    scheme-mode
    slime-repl-mode))

(cl-loop for mode in peter/paredit-modes
	 do (let ((hook (concat (symbol-name mode) "-hook")))
	      (add-hook (intern hook) #'paredit-mode)))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :ensure t
  :config
  (smartparens-global-mode t)
  (require 'smartparens-config))
#+END_SRC
**** Smartparens Keybinding
#+BEGIN_SRC emacs-lisp
(define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
(define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)

(define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-a") 'sp-backward-down-sexp)
(define-key smartparens-mode-map (kbd "C-S-d") 'sp-beginning-of-sexp)
(define-key smartparens-mode-map (kbd "C-S-a") 'sp-end-of-sexp)

;; (define-key smartparens-mode-map (kbd "C-M-e") 'sp-up-sexp)
(define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

(define-key smartparens-mode-map (kbd "C-M-n") 'sp-next-sexp)
(define-key smartparens-mode-map (kbd "C-M-p") 'sp-previous-sexp)

(define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
(define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

(define-key smartparens-mode-map (kbd "M-<delete>") 'sp-unwrap-sexp)
(define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

(define-key smartparens-mode-map (kbd "C-<right>") 'sp-forward-slurp-sexp)
(define-key smartparens-mode-map (kbd "C-<left>") 'sp-forward-barf-sexp)
(define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
(define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-backward-barf-sexp)

(define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)
(define-key smartparens-mode-map (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
(define-key smartparens-mode-map (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
(define-key smartparens-mode-map (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

(define-key smartparens-mode-map (kbd "C-]") 'sp-select-next-thing-exchange)
(define-key smartparens-mode-map (kbd "C-<left_bracket>") 'sp-select-previous-thing)
(define-key smartparens-mode-map (kbd "C-M-]") 'sp-select-next-thing)

(define-key smartparens-mode-map (kbd "M-F") 'sp-forward-symbol)
(define-key smartparens-mode-map (kbd "M-B") 'sp-backward-symbol)

(bind-key "C-c f" (lambda () (interactive) (sp-beginning-of-sexp 2)) smartparens-mode-map)
(bind-key "C-c b" (lambda () (interactive) (sp-beginning-of-sexp -2)) smartparens-mode-map)

(bind-key "H-t" 'sp-prefix-tag-object smartparens-mode-map)
(bind-key "H-p" 'sp-prefix-pair-object smartparens-mode-map)
(bind-key "H-y" 'sp-prefix-symbol-object smartparens-mode-map)
(bind-key "H-h" 'sp-highlight-current-sexp smartparens-mode-map)
(bind-key "H-e" 'sp-prefix-save-excursion smartparens-mode-map)
(bind-key "H-s c" 'sp-convolute-sexp smartparens-mode-map)
(bind-key "H-s a" 'sp-absorb-sexp smartparens-mode-map)
(bind-key "H-s e" 'sp-emit-sexp smartparens-mode-map)
(bind-key "H-s p" 'sp-add-to-previous-sexp smartparens-mode-map)
(bind-key "H-s n" 'sp-add-to-next-sexp smartparens-mode-map)
(bind-key "H-s j" 'sp-join-sexp smartparens-mode-map)
(bind-key "H-s s" 'sp-split-sexp smartparens-mode-map)
(bind-key "H-s r" 'sp-rewrap-sexp smartparens-mode-map)
(defvar hyp-s-x-map)
(define-prefix-command 'hyp-s-x-map)
(bind-key "H-s x" hyp-s-x-map smartparens-mode-map)
(bind-key "H-s x x" 'sp-extract-before-sexp smartparens-mode-map)
(bind-key "H-s x a" 'sp-extract-after-sexp smartparens-mode-map)
(bind-key "H-s x s" 'sp-swap-enclosing-sexp smartparens-mode-map)

(bind-key "C-x C-t" 'sp-transpose-hybrid-sexp smartparens-mode-map)

(bind-key ";" 'sp-comment emacs-lisp-mode-map)

(bind-key [remap c-electric-backspace] 'sp-backward-delete-char smartparens-strict-mode-map)
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-;" . avy-goto-char)
  :config
  (my/leader "SPC" 'avy-goto-char))
#+END_SRC
** File/Directory
*** Direds/Ranger
#+BEGIN_SRC emacs-lisp
(defun peter/dired-mode-hook ()
  (hl-line-mode)
  (define-key dired-mode-map "l" 'dired-find-file)
  (define-key dired-mode-map "h" 'dired-up-directory)
  (define-key dired-mode-map "j" 'dired-next-line)
  (define-key dired-mode-map "k" 'dired-previous-line))

(add-hook 'dired-mode-hook 'peter/dired-mode-hook)
(add-hook 'dired-mode-hook 'auto-revert-mode)

(defun peter/ranger-mode-hook ()
  (define-key ranger-mode-map "+" 'dired-create-directory)
  )


(use-package all-the-icons-dired
  :ensure t
  :diminish all-the-icons-dired-mode
  :config
  (add-hook 'ranger-mode-hook 'all-the-icons-dired-mode))

(use-package ranger
  :ensure t
  :config
  (ranger-override-dired-mode t)
  (setq ranger-deer-show-details t
	ranger-show-hidden nil
	ranger-cleanup-eagerly t)
  (define-key ranger-mode-map (kbd "M-1") nil)
  (define-key ranger-mode-map (kbd "M-2") nil)
  (define-key ranger-mode-map (kbd "M-3") nil)
  (define-key ranger-mode-map (kbd "M-4") nil)
  (define-key ranger-mode-map (kbd "M-5") nil)
  (define-key ranger-mode-map (kbd "M-6") nil)
  (define-key ranger-mode-map (kbd "M-7") nil)
  (define-key ranger-mode-map (kbd "M-8") nil)
  (define-key ranger-mode-map (kbd "M-9") nil)
  (add-hook 'ranger-mode-hook 'peter/ranger-mode-hook)
  (defun ranger-go (path)
    "Go subroutine"
    (interactive
     (list
      (read-char-choice
       "e   : /etc
d   : Desktop
p   : Playground
o   : Org Directory
s   : Sync Directory
n   : Nixos
G   : Golang Src Directory
u   : /usr
r,/ : /
v   : /var
m   : /media
h   : ~/
M   : /mnt
> "
       '(?q ?e ?u ?d ?l ?L ?o ?v ?m ?M ?s ?r ?G ?p ?/ ?h ?g ?D ?j ?k ?T ?t ?n ?c))))
    (message nil)
    (let* ((c (char-to-string path))
	   (new-path
	    (cl-case (intern c)
	      ('e "/etc")
	      ('u "/usr")
	      ('d "~/Desktop")
	      ('l (file-truename default-directory))
	      ('L (file-truename (dired-get-filename)))
	      ('o "~/Sync/org")
	      ('p "~/Playground")
	      ('v "/var")
	      ('m "/media")
	      ('M "/mnt")
	      ('s "~/Sync")
	      ('n "~/Nixos")
	      ('c "~/.config")
	      ('r "/")
	      ('G "~/golang/src")
	      ('h  "~/")
	      ('/ "/")))
	   (alt-option
	    (cl-case (intern c)
	      ;; Subdir Handlng
	      ('j 'ranger-next-subdir)
	      ('k 'ranger-prev-subdir)
	      ;; Tab Handling
	      ('T 'ranger-prev-tab)
	      ('t 'ranger-next-tab)
	      ('g 'ranger-goto-top))))
      (when (string-equal c "q")
	(keyboard-quit))
      (when (and new-path (file-directory-p new-path))
	(ranger-find-file new-path))
      (when (eq system-type 'windows-nt)
	(when (string-equal c "D")
	  (ranger-show-drives)))
      (when alt-option
	(call-interactively alt-option)))))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  ;; (setq projectile-switch-project-action 'projectile-dired)
  ;; Mode line
  ;; (setq projectile-mode-line
  ;; 	'(:eval (format " Proj[%s]" (projectile-project-name))))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (add-to-list 'projectile-globally-ignored-files ".tern-port"))

#+END_SRC
*** Fasd
#+BEGIN_SRC emacs-lisp
(defun counsel-fasd-function (str)
  (process-lines "fasd" "-l" str))

(defun counsel-fasd (&optional initial-input)
  "fasd counsel interface"
  (interactive)
  (ivy-read "fasd: " #'counsel-fasd-function
	    :initial-input initial-input
	    :dynamic-collection t
	    :require-match t
	    :sort t
	    :history 'counsel-fasd
	    :action (lambda (str)
		      (if (directory-name-p str)
			  (dired str)
			(find-file str)))
	    :caller 'counsel-fasd))

(use-package fasd
  :ensure t
  :config
  (global-fasd-mode 1)
  (my/leader
    "fd" 'counsel-fasd))
#+END_SRC
** Version Control
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
  :config
  (my/leader
    "gs" 'magit-status))
#+END_SRC
*** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :config
  (my/leader "gm" 'git-timemachine))

(eval-after-load 'git-timemachine
  '(progn
     (evil-make-overriding-map git-timemachine-mode-map 'normal)
     ;; force update evil keymaps after git-timemachine-mode loaded
     (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))
#+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode +1)
  ;(evil-leader/set-key "gg" 'git-gutter:popup-hunk)
  )
#+END_SRC
*** Git Auto Commit Mode
#+BEGIN_SRC emacs-lisp
(use-package git-auto-commit-mode
  :ensure t)
#+END_SRC
** Interface Enhancement
*** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :config
  ;; (global-set-key (kbd "<f1> f") 'helpful-function)
  (global-set-key (kbd "<f1> c") 'helpful-command)
  ;; (global-set-key (kbd "<f1> v") 'helpful-variable)
  ;; (global-set-key (kbd "<f1> k") 'helpful-key)
  )
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :diminish rainbow-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-mode)
  (add-hook 'conf-xdefaults-mode-hook #'rainbow-mode))
#+END_SRC
*** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode)
#+END_SRC
*** Beacon Mode
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  (diminish 'beacon-mode))
#+END_SRC
*** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (setq which-key-idle-delay 2.5)
  :config
  (which-key-mode))
#+END_SRC
*** Crux
Open file with sudo if needed
#+BEGIN_SRC emacs-lisp
(use-package crux
  :diminish t
  :ensure t
  :config
  (crux-reopen-as-root-mode))
#+END_SRC
*** Paradox
package.el wrapper with upgrade package bind to ~<Leader> p u~
#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure t
  :config
  (setq paradox-github-token t)
  (evil-set-initial-state 'paradox-menu-mode 'emacs)
  (my/leader
    "pr" 'paradox-list-packages
    "pu" 'paradox-upgrade-packages))
#+END_SRC
*** Hide Show Comments
#+BEGIN_SRC emacs-lisp
(use-package hide-comnt
  :ensure t
  :config
  (my/leader "ch" 'hide/show-comments-toggle))
#+END_SRC
*** IBuffer
#+BEGIN_SRC emacs-lisp
  (defun peter/ibuffer-mode-hook ()
    (hl-line-mode)
    (define-key ibuffer-mode-map "j" 'ibuffer-forward-line)
    (define-key ibuffer-mode-map "k" 'ibuffer-backward-line))
(add-hook 'ibuffer-mode-hook 'peter/ibuffer-mode-hook)
#+END_SRC
*** IMenu Anywhere
#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :ensure t
  :config
  )
#+END_SRC
* Org Mode
** Org Mode General
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("â" "â" "â" "â" "â" "â¯" "â" )))

(global-set-key (kbd "\C-cc") 'org-capture)
(global-set-key (kbd "\C-ca") 'org-agenda)
(global-set-key (kbd "\C-cl") 'org-store-link)
(evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point)
(evil-define-key 'normal org-mode-map (kbd "g'") 'org-edit-special)
(setq org-startup-indented t)
(setq org-startup-folded t)
(setq org-hide-emphasis-markers t)
(setq org-imenu-depth 5)
(if (string= "xps" (system-name))
    (setq org-image-actual-width 900)
  (setq org-image-actual-width 600))
(setq org-link-frame-setup
      '((file . find-file)
	(vm . vm-visit-folder)))
(my/leader
  "op" 'org-mobile-push
  "of" 'org-mobile-pull
  "as" 'org-clock-goto
  "aw" 'org-agenda-list
  "aa" 'org-todo-list
  "ac" 'org-capture)
;; diminish org-indent-mode
(eval-after-load 'org-indent '(diminish 'org-indent-mode))

(my/leader-mode :keymaps 'org-mode-map
  "i" 'counsel-org-goto)

;; org modules
(add-to-list 'org-modules 'org-habit)
(add-to-list 'org-modules 'org-protocol)
(add-to-list 'org-modules 'org-man)

;; load modules
(require 'org-habit)
(require 'org-protocol)
(require 'org-man)

;; disable time dispaly for mode line compatibility
(setq org-timer-display nil)

;; line wrap in org mode
(add-hook 'org-mode-hook 'visual-line-mode)

;; narrow to subtree after selecting entry in org agenda
(add-hook 'org-clock-goto-hook 'org-narrow-to-subtree)
(advice-add 'org-agenda-switch-to :after #'org-narrow-to-subtree)

;; refresh inline image after evaluate code block
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

;; Enter insert state when opening log buffer
(add-hook 'org-log-buffer-setup-hook 'evil-insert-state)
;; Org capture initial state insert
(add-hook 'org-capture-mode-hook 'evil-insert-state)
;; Org src initial insert state
(add-hook 'org-src-mode-hook 'evil-insert-state)

;; Org Babel
(setq org-src-window-setup 'current-window)
(setq org-src-preserve-indentation t)
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-support-shift-select 'always)

(org-babel-do-load-languages 'org-babel-load-languages
			     '((sh . t)
			       (gnuplot . t)
			       (octave . t)
                               (dot . t)))

#+END_SRC
** Org Agenda
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d)" "CANCELED(c@)")))
(setq org-default-notes-file "~/Sync/org/inbox.org")
(setq org-agenda-files
      (list "~/Sync/org/inbox.org"
	    "~/Sync/org/project.org"
            "~/Sync/org/web.org"
	    "~/Sync/org/someday.org"
	    "~/Sync/org/todo.org"))
(setq org-directory "~/Sync/org")
(setq org-log-done 'time)
(setq org-log-states-order-reversed nil)

;; org refile
(defun peter/org-buffer-files ()

  "Return list of opened orgmode buffer files"

  (mapcar (function buffer-file-name)

          (org-buffer-list 'files)))

(setq org-refile-targets '((nil :maxlevel . 2)
			   (peter/org-buffer-files :maxlevel . 3)
			   (org-agenda-files :maxlevel . 2)))
;; Refile in a single go
(setq org-outline-path-complete-in-steps nil)
;; Show full paths for refiling
(setq org-refile-use-outline-path t)

(defun peter/agenda-mode-config ()
  "agenda mode key bindings and config"
  (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
  (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)
  (define-key org-agenda-mode-map "g" 'org-agenda-goto-date)
  (define-key org-agenda-mode-map "n" 'org-agenda-capture)
  (define-key org-agenda-mode-map "I" 'org-pomodoro)
  (define-key org-agenda-mode-map "p" 'org-mobile-push)
  (define-key org-agenda-mode-map "f" 'org-mobile-pull)
  (define-key org-agenda-mode-map (kbd "C-e") 'evil-scroll-line-down)
  (define-key org-agenda-mode-map (kbd "C-y") 'evil-scroll-line-up)
  (hl-line-mode))

(add-hook 'org-agenda-mode-hook 'peter/agenda-mode-config)
#+END_SRC
** Org Mobile
#+BEGIN_SRC emacs-lisp
(setq org-mobile-inbox-for-pull "~/Sync/org/inbox.org")
(setq org-mobile-directory "~/Sync/MobileOrg")
#+END_SRC
** Org Caputre
[[https://github.com/sprig/org-capture-extension][sprig/org-capture-extension: A Chrome and firefox extension facilitating org-capture in emacs]]
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("i" "Inbox" entry (file "~/Sync/org/inbox.org")
	 "* TODO %?\n %i\n")
	("j" "Journal" entry (file+datetree "~/Sync/org/journal.org")
	 "* %?\nEntered on %U\n %i\n")
	("p" "org-protocol" entry (file "~/Sync/org/web.org")
	 "* [[%:link][%:description]]\n#+BEGIN_QUOTE\n%:initial\n#+END_QUOTE"
	 :empty-line 1)
	("L" "org-protocol-link" entry (file "~/Sync/org/web.org")
	 "* [[%:link][%:description]]\n"
	 :empty-line 1)
	("w" "vocabulary prompt" plain (file "~/Sync/org/vocabulary.org")
	 "%(call-interactively #'my-vocabulary-format-result-prompt)")))

(defvar peter/org-refile-index 0
  "Indicator for org-caputre-refile, if 0 delete frame if 1 no delete ")

(advice-add 'org-capture-refile :before '(lambda () (setq peter/org-refile-index 1)))
(advice-add 'org-capture-refile :after '(lambda ()
					  (setq peter/org-refile-index 0)
					  (peter/org-capture-delete-frame)))

(defun peter/org-capture-window ()
  (if (equal "org-agenda" (frame-parameter nil 'name))
      (delete-other-windows)))

(defun peter/org-capture-delete-frame ()
  (if (and (equal peter/org-refile-index 0)
	   (equal "org-agenda" (frame-parameter nil 'name)))
      (delete-frame)))


(add-hook 'org-capture-after-finalize-hook 'peter/org-capture-delete-frame)

(add-hook 'org-capture-mode-hook 'peter/org-capture-window)

#+END_SRC
*** Dictionary
#+BEGIN_SRC emacs-lisp
(defun my-vocabulary-format-result (word)
  "Format request result of WORD."
  (let* ((json (youdao-dictionary--request word))
         (query        (assoc-default 'query       json)) ; string
         (translation  (assoc-default 'translation json)) ; array
         (errorCode    (assoc-default 'errorCode   json)) ; number
         (web          (assoc-default 'web         json)) ; array
         (basic        (assoc-default 'basic       json)) ; alist
         ;; construct data for display
         (phonetic (assoc-default 'phonetic basic))
         (translation-str (mapconcat
                           (lambda (trans) (concat " " trans))
                           translation "\n"))
         (basic-explains-str (mapconcat
                              (lambda (explain) (concat " " explain))
                              (assoc-default 'explains basic) "\n"))
         (web-str (mapconcat
                   (lambda (k-v)
                     (format " %s :: %s"
                             (assoc-default 'key k-v)
                             (mapconcat 'identity (assoc-default 'value k-v) "; ")))
                   web "\n")))
    (if basic
        (format "** English          :drill:\n*%s* /%s/\n*** Translation\n%s\n Web References\n%s\n"
                query phonetic basic-explains-str web-str)
      (format "** English\n%s\n*** Translation\n%s\n"
              query translation-str))))



(defun my-vocabulary-format-result-prompt ()
  "Format request result of WORD."
  (interactive)
  (let* ((json (youdao-dictionary--request (read-from-minibuffer "word: ")))
         (query        (assoc-default 'query       json)) ; string
         (translation  (assoc-default 'translation json)) ; array
         (errorCode    (assoc-default 'errorCode   json)) ; number
         (web          (assoc-default 'web         json)) ; array
         (basic        (assoc-default 'basic       json)) ; alist
         ;; construct data for display
         (phonetic (assoc-default 'phonetic basic))
         (translation-str (mapconcat
                           (lambda (trans) (concat " " trans))
                           translation "\n"))
         (basic-explains-str (mapconcat
                              (lambda (explain) (concat " " explain))
                              (assoc-default 'explains basic) "\n"))
         (web-str (mapconcat
                   (lambda (k-v)
                     (format " %s :: %s"
                             (assoc-default 'key k-v)
                             (mapconcat 'identity (assoc-default 'value k-v) "; ")))
                   web "\n")))
    (if basic
        (format "** English          :drill:\n*%s* /%s/\n*** Translation\n%s\n Web References\n%s\n"
                query phonetic basic-explains-str web-str)
      (format "** English\n%s\n*** Translation\n%s\n"
              query translation-str))))
#+END_SRC
** Org Protocol
#+BEGIN_SRC emacs-lisp
(defun my-vocabulary-write (word)
  (write-region
   (my-vocabulary-format-result word)  nil
   my-vocabulary-path t))

(defvar my-vocabulary-path "/home/peterzky/Sync/org/vocabulary.org")

(defun org-protocol-vocabulary (fname)
  (let* ((splitparts (org-protocol-parse-parameters fname t))
         (w (plist-get splitparts :word)))
    (my-vocabulary-write w)
(message "word saved %s" w))
  nil)

(add-to-list 'org-protocol-protocol-alist
	     '("Vocabulary" :protocol "vocabulary" :function org-protocol-vocabulary))
#+END_SRC
** Org Pomodoro
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :ensure t
  :config
  ;(setq org-pomodoro-keep-killed-pomodoro-time t)
  ;(setq org-clock-continuously nil)
  (global-set-key [f2] 'org-pomodoro)
  (global-set-key (kbd "C-x t") 'org-pomodoro))

;(add-hook 'org-clock-out-hook #'org-pomodoro-kill)
#+END_SRC
** Org Latex
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
(setq tex-compile-commands '(("xelatex %r")))
(setq tex-command "xelatex")
(setq-default TeX-engine 'xelatex)
(setq org-latex-classes
      '(("article"
	 "
\\documentclass{ctexart}
\\usepackage{hyperref}
\\hypersetup{
  colorlinks=true,
  linkcolor=[rgb]{0,0.37,0.53},
  citecolor=[rgb]{0,0.47,0.68},
  filecolor=[rgb]{0,0.37,0.53},
  urlcolor=[rgb]{0,0.37,0.53},
  pagebackref=true,
  linktoc=all,}
	 "

	 ("\\section{%s}" . "\\section*{%s}")
	 ("\\subsection{%s}" . "\\subsection*{%s}")
	 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	 ("\\paragraph{%s}" . "\\paragraph*{%s}")
	 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	))
#+END_SRC
** Org Wiki
#+BEGIN_SRC emacs-lisp :tangle (if (file-exists-p "~/Sync") "yes" "no")
(use-package org-wiki
  :load-path "~/Sync/site-lisp/org-wiki"
  :config
  (setq org-wiki-location "~/Sync/wiki")
  (my/leader "ki" 'org-wiki-index
	     "ks" 'peter/org-wiki-search
	     "kc" 'org-wiki-create
	     "kj" 'org-wiki-insert
	     "kt" 'org-wiki-asset-open-terminal
	     "ae" 'org-wiki-helm))

(defun peter/org-wiki-search ()
  (interactive)
  (counsel-ag nil org-wiki-location nil "Wiki Search"))

(defun org-wiki-asset-open-terminal ()
  "Open asset directory of current page with terminal"
  (interactive)
  (org-wiki--assets-buffer-make-dir)
  (terminal-here-launch-in-directory (expand-file-name (file-name-base (buffer-file-name)))))
#+END_SRC
** COMMENT Org Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)

(require 'org-mime)

(setq org-mime-library 'mml)


(add-hook 'message-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-htmlize)))

(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                           "#E6E1DC" "#232323"))))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))
#+END_SRC
** COMMENT Org Brain
#+BEGIN_SRC emacs-lisp
(use-package org-brain
  :ensure t
  :init
  (when (file-exists-p "~/Sync")
    (setq org-brain-path "~/Sync/org/brain"))
  (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
  :config
  ;; (org-brain-activate-cache-saving)
  (my/leader
    "oa" 'org-brain-visualize
    "oe" 'org-brain-deft)
  (define-key org-brain-visualize-mode-map "/" 'org-brain-deft))

(defun org-brain-deft ()
  "Use `deft' for files in `org-brain-path'."
  (interactive)
  (let ((deft-directory org-brain-path)
	(deft-recursive t)
	(deft-extensions '("org")))
    (deft)))


(use-package link-hint
  :ensure t
  :config
  (define-key org-brain-visualize-mode-map (kbd "C-l") #'link-hint-open-link))

(use-package ascii-art-to-unicode
  :ensure t
  :config
  (defun aa2u-buffer ()
    (aa2u (point-min) (point-max)))

  (add-hook 'org-brain-after-visualize-hook #'aa2u-buffer))
#+END_SRC
** COMMENT Deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config
  (evil-set-initial-state 'deft-mode 'emacs)
  (evil-set-initial-state 'artist-mode 'emacs)
  (my/leader
    "ae" 'deft)
  (setq deft-extensions '("org"))
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename t)
  ;; (setq deft-org-mode-title-prefix t)
  (setq deft-default-extension "org")
  (setq deft-directory "~/Sync/notes")
  (setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase))))
#+END_SRC
** Org Inline Image Workaround
#+BEGIN_SRC emacs-lisp
;; * Rescaling inline-images
;; This will eventually be obsolete if this makes it into org-mode
(defvar org-inline-image-resize-function
  #'org-inline-image-resize
  "Function that takes a filename and resize argument and returns
 a new filename pointing to the resized image.")


(defun org-inline-image-resize (fname resize-options)
  "Resize FNAME with RESIZE-OPTIONS.
RESIZE-OPTIONS are passed to \"mogrify resized-fname -resize resize-options\".
RESIZE-OPTIONS could be:
N% to scale the image by a percentage.
N to set the width, keeping the aspect ratio constant.
xN to set the height, keeping the aspect ratio constant.
NxM! to set the width and height, ignoring the aspect ratio.
See http://www.imagemagick.org/Usage/resize/#resize for more options."
  (let* ((md5-hash (with-temp-buffer (insert-file-contents fname)
				     (insert (format "%s" resize-options))
				     (md5 (buffer-string))))
	 (resized-fname (concat (expand-file-name
				 md5-hash
				 temporary-file-directory)
				"."
				(file-name-extension fname)))
	 (cmd (format "mogrify -resize %s %s"
		      resize-options
		      resized-fname)))
    (if (not (executable-find "mogrify"))
	(progn
	  (message "No mogrify executable found. To eliminate this message, set  `org-inline-image-resize-function' to nil or install imagemagick from http://www.imagemagick.org/script/binary-releases.php")
	  fname)
      (unless (file-exists-p resized-fname)
	(copy-file fname resized-fname)
	(shell-command cmd))
      resized-fname)))


;; this is copied and modified from org.el
(defun org-display-inline-images (&optional include-linked refresh beg end)
  "Display inline images.
An inline image is a link which follows either of these
conventions:
  1. Its path is a file with an extension matching return value
     from `image-file-name-regexp' and it has no contents.
  2. Its description consists in a single link of the previous
     type.
When optional argument INCLUDE-LINKED is non-nil, also links with
a text description part will be inlined.  This can be nice for
a quick look at those images, but it does not reflect what
exported files will look like.
When optional argument REFRESH is non-nil, refresh existing
images between BEG and END.  This will create new image displays
only if necessary.  BEG and END default to the buffer
boundaries."
  (interactive "P")
  (when (display-graphic-p)
    (unless refresh
      (org-remove-inline-images)
      (when (fboundp 'clear-image-cache) (clear-image-cache)))
    (org-with-wide-buffer
     (goto-char (or beg (point-min)))
     (let ((case-fold-search t)
	   (file-extension-re (image-file-name-regexp)))
       (while (re-search-forward "[][]\\[\\(?:file\\|[./~]\\)" end t)
	 (let ((link (save-match-data (org-element-context))))
	   ;; Check if we're at an inline image.
	   (when (and (equal (org-element-property :type link) "file")
		      (or include-linked
			  (not (org-element-property :contents-begin link)))
		      (let ((parent (org-element-property :parent link)))
			(or (not (eq (org-element-type parent) 'link))
			    (not (cdr (org-element-contents parent)))))
		      (org-string-match-p file-extension-re
					  (org-element-property :path link)))
	     (let ((file (expand-file-name
			  (org-link-unescape
			   (org-element-property :path link)))))
	       (when (file-exists-p file)
		 (let ((width
			;; Apply `org-image-actual-width' specifications.
			(cond
			 ((and (not (image-type-available-p 'imagemagick))
			       (not org-inline-image-resize-function))
			  nil)
			 ((eq org-image-actual-width t) nil)
			 ((listp org-image-actual-width)
			  (or
			   ;; First try to find a width among
			   ;; attributes associated to the paragraph
			   ;; containing link.
			   (let* ((paragraph
				   (let ((e link))
				     (while (and (setq e (org-element-property
							  :parent e))
						 (not (eq (org-element-type e)
							  'paragraph))))
				     e))
				  (attr_org (org-element-property :attr_org paragraph)))
			     (when attr_org
			       (plist-get
				(org-export-read-attribute :attr_org  paragraph) :width)))
			   ;; Otherwise, fall-back to provided number.
			   (car org-image-actual-width)))
			 ((numberp org-image-actual-width)
			  org-image-actual-width)))
		       (old (get-char-property-and-overlay
			     (org-element-property :begin link)
			     'org-image-overlay)))
		   (if (and (car-safe old) refresh)
		       (image-refresh (overlay-get (cdr old) 'display))

		     (when (and width org-inline-image-resize-function)
		       (setq file (funcall  org-inline-image-resize-function file width)
			     width nil))
		     (let ((image (create-image file
						(cond
						 ((image-type-available-p 'imagemagick)
						  (and width 'imagemagick))
						 (t nil))
						nil
						:width width)))
		       (when image
			 (let* ((link
				 ;; If inline image is the description
				 ;; of another link, be sure to
				 ;; consider the latter as the one to
				 ;; apply the overlay on.
				 (let ((parent
					(org-element-property :parent link)))
				   (if (eq (org-element-type parent) 'link)
				       parent
				     link)))
				(ov (make-overlay
				     (org-element-property :begin link)
				     (progn
				       (goto-char
					(org-element-property :end link))
				       (skip-chars-backward " \t")
				       (point)))))
			   (overlay-put ov 'display image)
			   (overlay-put ov 'face 'default)
			   (overlay-put ov 'org-image-overlay t)
			   (overlay-put
			    ov 'modification-hooks
			    (list 'org-display-inline-remove-overlay))
			   (push ov org-inline-image-overlays)))))))))))))))

;; * Enable pdf and eps images in org-mode
;; Suggested on the org-mode maillist by Julian Burgos
(add-to-list 'image-file-name-extensions "pdf")
(add-to-list 'image-file-name-extensions "eps")

(add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")

(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
#+END_SRC
* Programming Languages
** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-sandbox :ensure t)

(use-package nix-mode :ensure t
  )
#+END_SRC
** C/C++
NixOS Caveat:
- create development environment with =shell.nix=
- export compile flags using ~cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .~
- run =gencp= within /nix-shell/ to generate /.clang_complete/ for irony-mode completion
#+BEGIN_SRC emacs-lisp
(use-package rtags :ensure t)

(use-package irony :ensure t)

(use-package company-irony :ensure t)

(defun rtags-nixos-include-path()
  (replace-regexp-in-string "\n" " "
			    (replace-regexp-in-string "-isystem" "-s"
						      (nix-shell
						       (nix-current-sandbox)
						       "printenv NIX_CFLAGS_COMPILE NIX_CXXSTDLIB_COMPILE"))))
(when (executable-find "nix-env")
  (defun rtags-command ()
    "Shell command used to start the `rtags-server' process."
    (format "%s %s %s"
	    (rtags-executable-find "rdm")
	    (rtags-rdm-includes)
	    (rtags-nixos-include-path)
	    rtags-process-flags)))

(use-package google-c-style
  :ensure t)

(defun peter/c-mode-hook ()
  (google-set-c-style)
  (google-make-newline-indent)
  (rainbow-mode -1)
  (set (make-local-variable 'company-backends)
       '(company-irony company-files))
  (local-set-key (kbd "C-c C-j") 'rtags-find-symbol-at-point)
  (local-set-key (kbd "C-c C-a") 'rtags-include-file)
  (local-set-key (kbd "C-c r") 'rtags-rename-symbol)
  (local-set-key (kbd "C-c C-r") 'rtags-restart-process)
  (local-set-key (kbd "C-c C-i") 'irony-cdb-autosetup-compile-options)
  (rtags-start-process-unless-running)
  (irony-mode))

(add-hook 'c-mode-common-hook 'peter/c-mode-hook)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(use-package gorepl-mode
  :ensure t
  :diminish gorepl-mode
  :config
  (add-hook 'go-mode-hook #'gorepl-mode))

(use-package company-go
  :ensure t
  :init
  (progn
    (setq company-go-show-annotation nil)))

(use-package gotest
  :ensure t)

(use-package go-guru
  :ensure t
  :config
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

(use-package go-playground :ensure t)

(use-package go-rename :ensure t)

(use-package go-eldoc
  :ensure t
  :diminish eldoc-mode
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))

(defun peter/go-mode-hook ()
  (interactive)
  (setq-local helm-dash-docsets '("Go"))
  (local-set-key (kbd "C-c C-d") 'godoc-at-point)
  (local-set-key (kbd "C-c r") 'go-rename)
  (local-set-key (kbd "C-c g") 'go-playground)
  (local-set-key (kbd "C-c C-k") 'go-playground-rm)
  (local-set-key [f5] 'peter/go-install-or-run))

(defun peter/go-install-or-run ()
  (interactive)
  (cond ((bound-and-true-p go-playground-mode)
	 (go-playground-exec))
	((string= (buffer-substring-no-properties 1 13) "package main")
	 (go-run))
	(t (compile "go install"))))

(use-package go-mode
  :ensure t
  :config
  (setq go-playground-basedir "~/golang/src/playground")
  (setq gofmt-command "goimports")
  (setq godoc-at-point-function 'godoc-gogetdoc)
  (add-hook 'go-mode-hook 'peter/go-mode-hook)
  (add-hook 'before-save-hook 'gofmt-before-save)
  (add-hook 'go-mode-hook (lambda ()
			    (set (make-local-variable 'company-backends) '(company-go company-files))
			    (company-mode))))

(use-package flycheck-gometalinter
  :ensure t
  :config
  (flycheck-gometalinter-setup))
#+END_SRC
** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :diminish rainbow-delimiters-mode
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'peter/emacs-mode-hook))

(defun peter/emacs-mode-hook ()
  (local-set-key (kbd "C-j") 'eval-print-last-sexp))
#+END_SRC
** Rust
Rust-mode dependencies
#+BEGIN_SRC sh :result no
cargo install racer
cargo install rustfmt
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :config
  (setq rust-format-on-save t)
  (add-hook 'rust-mode-hook #'racer-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (define-key rust-mode-map (kbd "C-c C-j") #'racer-find-definition)
  (define-key rust-mode-map (kbd "C-c C-d") #'racer-describe)
  (setq company-tooltip-align-annotations t))

(use-package racer
  :ensure t
  :config
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))

(use-package cargo
  :ensure t
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

(use-package toml-mode
  :ensure t)
#+END_SRC
** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime-company
  :ensure t)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "sbcl")
  (setq slime-contribs '(slime-fancy))
  (slime-setup '(slime-fancy slime-company)))
#+END_SRC
** Octave
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'inferior-octave-mode 'emacs)
(setq inferior-octave-program "octave")
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))

(defun peter/octave-mode-hook ()
  (local-set-key (kbd "C-c C-d") 'octave-help)
  (local-set-key (kbd "C-c C-c") 'octave-send-buffer)
  (local-set-key (kbd "C-c C-q") 'octave-hide-process-buffer)
  (local-set-key (kbd "C-c C-z") 'octave-show-process-buffer)
  (local-set-key (kbd "C-c C-k") 'octave-kill-process))

(add-hook 'octave-mode-hook 'peter/octave-mode-hook)
#+END_SRC
** Haskell intero
nixos config
install intero in directory =~/.stack/global-project/=
~$HOME/.stack/config.yaml~
#+BEGIN_SRC yaml
nix:
  enable: true
#+END_SRC

~$HOME/.stack/global-project/stack.yaml~
#+BEGIN_SRC yaml
flags: {}
extra-package-dbs: []
packages: []
extra-deps: []
resolver: lts-9.6
nix:
  packages:
    - libcxx
    - icu
    - gcc
    - ncurses
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package intero
  :ensure t
  :config
  (intero-global-mode 1)
  (general-define-key :states '(normal emacs)
		      :keymaps 'intero-mode-map
		      :prefix "C-c"
		      "C-d" 'intero-info
		      "C-j" 'intero-goto-definition))
#+END_SRC
* Utilities
** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
  (define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)
  (general-define-key :states '(emacs)
		      :keymaps 'pdf-view-mode-map
		      :non-normal-prefix "SPC"
		      "`" 'ivy-switch-buffer
		      "TAB" 'peter/switch-buffer))
#+END_SRC
** Mail
*** Send Mail
#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'message-send-mail-with-sendmail)
(setq sendmail-program "msmtp")
; tell msmtp to choose the SMTP server according to the from field in the outgoing email
(setq message-sendmail-extra-arguments '("--read-envelope-from"))
(setq message-sendmail-f-is-evil 't)

; add attachment with dired
; Then, mark the file(s) in dired you would like to attach and press C-c RET C-a, and youâll be asked whether to attach them to an existing message, or create a new one.
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

#+END_SRC
*** Mu4e
nixos workaround
#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "nix-env") "yes" "no")
;; nixos add to load path
(let ((mu4epath
       (concat
	(f-dirname
	 (file-truename
	  (executable-find "mu")))
	"/../share/emacs/site-lisp/mu4e")))
  (when (and
	 (string-prefix-p "/nix/store/" mu4epath)
	 (file-directory-p mu4epath))
    (add-to-list 'load-path mu4epath)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "mu") "yes" "no")
(use-package evil-mu4e :ensure t)

(require 'mu4e)

(my/leader "0" 'mu4e)

(add-to-list 'mu4e-view-actions
	     '("browser" . mu4e-action-view-in-browser) t)

(setq mu4e-maildir "~/.mail")

(setq mu4e-sent-messages-behavior 'delete)

(setq mu4e-maildir-shortcuts
      '( ("/sina/Inbox"            . ?a)
	 ("/qq/Inbox"              . ?q)
	 ("/icloud/Inbox"         . ?c)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "mbsync -a")

(setq
 user-mail-address "378096232@qq.com"
 user-full-name  "Peter Zheng"
 mu4e-compose-signature
 (concat
  "Peter Zheng "
  "peter.zky@qq.com"))

(setq message-kill-buffer-on-exit t)
(setq mu4e-view-show-images t)
(setq mu4e-html2text-command "w3m -T text/html")



(setq mu4e-use-fancy-chars t)
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-headers-skip-duplicates t)

(evil-define-key 'motion 'mu4e-main-mode-map
  (kbd "u") 'mu4e-update-index
  (kbd "U") 'mu4e-update-mail-and-index)

(evil-define-key 'motion 'mu4e-headers-mode-map
  (kbd "%") 'mu4e-headers-mark-pattern)

(add-hook 'mu4e-main-mode-hook #'mu4e-update-index)

#+END_SRC
** ElFeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t
  :config
  (setq elfeed-feeds
	'("http://planet.emacsen.org/atom.xml")))
#+END_SRC
** Yadm
Prerequisite: yadm version >= 1.0.8
access yadm repo via tramp
#+BEGIN_SRC emacs-lisp
(add-to-list 'tramp-methods
	     '("yadm"
	       (tramp-login-program "yadm")
	       (tramp-login-args (("enter")))
	       (tramp-login-env
		(("SHELL")
		 ("/bin/sh")))
	       (tramp-remote-shell "/bin/sh")
	       (tramp-remote-shell-login
		("-l"))
	       (tramp-remote-shell-args
		("-c"))
	       (tramp-connection-timeout 10)))


(defun reopen-as-yadm ()
  (interactive)
  (unless (file-remote-p (buffer-file-name)) (find-alternate-file
	    (concat "/yadm:" (getenv "USER") "@localhost:" buffer-file-name))))

#+END_SRC
** Terminal Here
#+BEGIN_SRC emacs-lisp
(use-package terminal-here
  :ensure t
  :config
  (when (string= system-type "gnu/linux")
    (setq terminal-here-terminal-command '("urxvt")))
  (my/leader
    "t" 'terminal-here))
#+END_SRC
** Chinese Support
*** Youdao Dictionary
#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :config
  (my/leader
    "oo" 'youdao-dictionary-search-at-point+))
#+END_SRC
*** Fcitx
#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "fcitx-remote") "yes" "no")
(use-package fcitx
  :ensure t
  :config
  (setq fcitx-use-dbus t)
  (setq fcitx-active-evil-states '(insert emacs hydrid))
  (fcitx-org-speed-command-turn-on)
  (fcitx-aggressive-minibuffer-turn-off)
  (fcitx-aggressive-setup))
#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
(diminish 'auto-revert-mode)

(use-package abbrev
  :diminish abbrev-mode)

(use-package auto-compile
  :ensure t
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
;;For editing systemd file
(use-package systemd
  :ensure t)

(use-package yaml-mode
  :ensure t)
#+END_SRC
