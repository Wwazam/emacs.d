#+TITLE:My Emacs Config

~C-c ;~ to comment out unwanted section
* Vanilla Emacs
** GUI
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(line-number-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC
** Default Behavior
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(setq help-window-select t)
(setq vc-follow-symlinks "Follow link")
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
(recentf-mode 1)
(setq Man-notify-method 'pushy)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq initial-scratch-message "")
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; mouse cursor
(mouse-avoidance-mode 'none)
;; start server if not started
(require 'server)
(unless (server-running-p) (server-start))
#+END_SRC
** External Application
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
    (setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program "conkeror"))
#+END_SRC
** User Defined Functions
#+BEGIN_SRC emacs-lisp
(defun peter/switch-buffer ()
  "switch to last buffer"
  (interactive)
  (if (evil-alternate-buffer)
      (switch-to-buffer (car (evil-alternate-buffer)))
    (switch-to-buffer (other-buffer (current-buffer) t))))

(defun peter/edit-config-file ()
  "edit config file"
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(defun peter/recompile-all-packages ()
  (interactive)
  (byte-recompile-directory package-user-dir nil 'force))

;; close window after kill buffer command
(advice-add 'kill-this-buffer :after #'delete-window)

(defun peter/split-vertically ()
  "Split window vertically and focus"
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun peter/split-horizontally ()
  "Split window horizontally and focus"
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(defun peter/widen ()
  "after widen scroll down"
  (interactive)
  (widen)
  (scroll-down 8))

(global-set-key (kbd "C-x k") 'kill-this-buffer)

(defun peter/narrow-to-defun ()
  "narrow function depanding on mode"
  (interactive)
  (let ((current-mode (message "%s" major-mode)))
    (cond
     ((or (equal current-mode "emacs-lisp-mode")
	  (equal current-mode "lisp-interaction-mode"))
      ( narrow-to-defun ))
     ((or (equal current-mode "js2-mode")
	  (equal current-mode "js2-jsx-mode")
	  )
      ( js2-narrow-to-defun )))))

(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
#+END_SRC
** User Defined Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h C-f") 'describe-face)
;; Compile
(global-set-key [f5] 'compile)
;; GDB
(global-set-key [f6] 'gdb)
#+END_SRC
* Bindings
#+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-create-definer my/leader
			  :states '(normal motion emacs)
			  :keymaps 'global
			  :prefix "SPC"
			  :non-normal-prefix "M-SPC")
  (general-create-definer my/leader-mode
			  :states '(normal motion emacs)
			  :prefix "SPC"
			  :non-normal-prefix "M-SPC"))
(my/leader
 "fs" 'save-buffer
 ;; "ll" 'linum-mode
 "he" 'elisp-index-search
 ;; "an" 'peter/open-note-file
 "qq" 'delete-frame
 "qQ" 'save-buffers-kill-emacs
 "wv" 'peter/split-horizontally
 "ws" 'peter/split-vertically
 "wd" 'delete-window
 "fed" 'peter/edit-config-file
 "cc" 'flycheck-mode
 "r" 'dired-jump
 "cl" 'evilnc-comment-or-uncomment-lines
 "TAB" 'peter/switch-buffer
 "1" 'select-window-1
 "2" 'select-window-2
 "3" 'select-window-3
 "4" 'select-window-4
 "5" 'select-window-5
 "6" 'select-window-6
 "7" 'select-window-7
 "8" 'select-window-8
 "9" 'select-window-9)
#+END_SRC
* Appearance
** Mode Line
*** Smart Mode Line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (setq sml/no-confirm-load-theme t
	sml/theme 'respectful
	sml/mode-width 'full
	sml/vc-mode-show-backend t
	projectile-mode-line nil
	)
  :config
  (sml/setup))

(setq evil-mode-line-format '(before . mode-line-front-space))

(setq-default mode-line-format
	      '("%e"
		mode-line-front-space
		" "
		;mode-line-mule-info
		mode-line-client
		mode-line-modified
		mode-line-auto-compile
		mode-line-remote
		mode-line-frame-identification
		" "
		mode-line-buffer-identification
		sml/pos-id-separator
		" "
		(vc-mode vc-mode)
          " "
		mode-line-modes
		;mode-line-misc-info
		sml/pre-modes-separator
		mode-line-position
		"(%l:%c)"
		mode-line-end-spaces
		))
#+END_SRC
** Themes
[[https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr][Emacs daemon and theme]]
[[https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr/34697306#34697306][follow up solution]]
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/Nextcloud")
    (use-package doom-themes
      :load-path "~/Nextcloud/site-lisp/doom-themes/")
  (use-package doom-themes :ensure t))

(setq my:theme-index 0)
(setq my:theme-list
      '(doom-tomorrow-night adwaita))

(defun my:enabled-themes ()
      (delete 'smart-mode-line-respectful
	      custom-enabled-themes))

(defun my:clear-theme ()
  (interactive)
  (mapcar #'disable-theme (my:enabled-themes)))

(defun my:switch-theme ()
  (interactive)
  (mapcar #'disable-theme (my:enabled-themes))
  (setq my:theme-index (% (1+ my:theme-index) (length my:theme-list)))
  (setq my:theme (nth my:theme-index my:theme-list))
  (load-theme my:theme :no-confirm))

(my/leader "u" 'my:switch-theme)

(setq my:theme (nth my:theme-index my:theme-list))
(defvar my:theme-window-loaded nil)
(defvar my:theme-terminal-loaded nil)

(if (daemonp)
    (add-hook 'after-make-frame-functions(lambda (frame)
					   (select-frame frame)
					   (if (window-system frame)
					       (unless my:theme-window-loaded
						 (if my:theme-terminal-loaded
						     (enable-theme my:theme)
						   (load-theme my:theme t))
						 (setq my:theme-window-loaded t))
					     (unless my:theme-terminal-loaded
					       (if my:theme-window-loaded
						   (enable-theme my:theme)
						 (load-theme my:theme t))
					       (setq my:theme-terminal-loaded t)))))

  (progn
    (load-theme my:theme t)
    (if (display-graphic-p)
	(setq my:theme-window-loaded t)
      (setq my:theme-terminal-loaded t))))
#+END_SRC
** Window Control
*** Window Numbering
Use Alt + 1 2 3 to switch window
#+BEGIN_SRC emacs-lisp
(use-package window-numbering
  :ensure t
  :config
  (defun window-numbering-install-mode-line (&optional position)
    "Do nothing.")
  (window-numbering-mode))
#+END_SRC
*** Popwin
popup window for better experience
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :ensure t
  :config
  (setq popwin:popup-window-height 15)
  (global-set-key (kbd "C-`") popwin:keymap)
  (define-key popwin:keymap "q" 'popwin:close-popup-window)
  (popwin-mode 1))

(defvar my:popup-config
  '(("*Backtrace*" :regexp nil)
    ("*warnings*" :regexp nil)
    ("*Youdao Dictionary*" :regexp nil)
    (" *undo-tree*" :position bottom)
    (" *undo-tree Diff*" :position bottom)
    ("*HS-Error*" :position bottom)
    ("*Gofmt Errors*" :position bottom)
    ("*Buffer List*" :position bottom)
    ("*godoc <at point>*" :position bottom)
    ("*Go Test*" :position bottom)
    (vc-mode :noselect nil)
    (compilation-mode :noselect nil)
    (go-guru-output-mode :noselect nil)
    (racer-help-mode :noselect nil)
    (intero-help-mode :noselect nil)
    (helpful-mode :noselect nil)))

(cl-loop for conf in my:popup-config
	 do (push conf popwin:special-display-config))
#+END_SRC
** Interface Enhancement
*** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :config)
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :diminish rainbow-mode
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-mode)
  (add-hook 'conf-xdefaults-mode-hook #'rainbow-mode))
#+END_SRC
*** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode)
#+END_SRC
*** Beacon Mode
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  (diminish 'beacon-mode))
#+END_SRC
* Evil Mode
** Evil Setup
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (setq evil-insert-state-map (make-sparse-keymap))
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
  (evil-define-key 'motion help-mode-map (kbd "<tab>") 'forward-button)
  (evil-define-key 'motion help-mode-map (kbd "S-<tab>") 'backward-button))


(setq evil-normal-state-tag "N"
      evil-insert-state-tag "I"
      evil-motion-state-tag "M"
      evil-emacs-state-tag  "E"
      evil-visual-state-tag "V"
      evil-motion-state-cursor	'(box "#663399")
      evil-normal-state-cursor	'(box "YellowGreen")
      evil-insert-state-cursor	'(bar "#F86155")
      evil-emacs-state-cursor	'(bar "SkyBlue2")
      evil-visual-state-cursor	'(box "gray"))
#+END_SRC
** Evil Initial Mode
[[https://github.com/bling/dotemacs/blob/master/config/init-evil.el][dotemacs/init-evil.el at master Â· bling/dotemacs]]
#+BEGIN_SRC emacs-lisp
(defvar peter/motion-state-modes
  '(special-mode go-guru-output-mode racer-help-mode helpful-mode
		 intero-help-mode))

(defvar peter/emacs-state-modes
  '(artist-mode dired-mode ivy-occur-mode view-mode debugger-mode
		intero-repl-mode ))

(defvar peter/emacs-state-minor-modes
  '(edebug-mode))

(cl-loop for mode in peter/motion-state-modes
	 do (add-to-list 'evil-motion-state-modes mode))

(cl-loop for mode in peter/emacs-state-modes
	 do (add-to-list 'evil-emacs-state-modes mode))

(cl-loop for mode in peter/emacs-state-modes
	 do (add-to-list 'evil-emacs-state-modes mode))

(cl-loop for mode in peter/emacs-state-minor-modes
	 do (let ((hook (concat (symbol-name mode) "-hook")))
	      (add-hook (intern hook) `(lambda ()
					 (if ,mode
					     (evil-emacs-state)
					   (evil-normal-state))))))
#+END_SRC
** Evil Magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :ensure t
  :config
  ;; Open commit message with insert state
  (add-hook 'git-commit-mode-hook 'evil-insert-state))
#+END_SRC
** Evil Nerd Commenter
text object ~c~ as comment
operator ~,,~ as comment
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :config
  (evilnc-default-hotkeys))
#+END_SRC
** Evil Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC
** Evil MC
=grm= make all cursors
=gru= remove all cursors
=grj= next match
=grk= previous match
visual mode:
=C-n= next match
=C-p= previous match
=C-t= skip match
#+BEGIN_SRC emacs-lisp
(use-package evil-mc
  :ensure t
  :config
  (global-evil-mc-mode 1))
#+END_SRC
* Utility
** Git
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
  :config
  (my/leader
    "gs" 'magit-status))
#+END_SRC
*** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :config
  (my/leader "gm" 'git-timemachine))

(eval-after-load 'git-timemachine
  '(progn
     (evil-make-overriding-map git-timemachine-mode-map 'normal)
     ;; force update evil keymaps after git-timemachine-mode loaded
     (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))
#+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode +1)
  ;(evil-leader/set-key "gg" 'git-gutter:popup-hunk)
  )
#+END_SRC
*** Git Auto Commit Mode
#+BEGIN_SRC emacs-lisp
(use-package git-auto-commit-mode
  :ensure t)
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
    :ensure t)
#+END_SRC
*** Hydra Narrow
#+BEGIN_SRC emacs-lisp
(defhydra hydra-nr (:exit t)
    "narrow state"
    ("r" narrow-to-region "region")
    ("n" narrow-to-region "region")
    ("w" peter/widen "widen")
    ("s" org-narrow-to-subtree "org tree")
    ("d" peter/narrow-to-defun "defun"))

(my/leader
    "n" 'hydra-nr/body)
#+END_SRC
*** Hydra Frame
#+BEGIN_SRC emacs-lisp
(defhydra hydra-frame ()
    ("d" make-frame "new frame")
    ("z" delete-frame"delete frame")
    ("n" other-frame "switch frame"))
(my/leader
    "z" 'hydra-frame/body)
#+END_SRC
*** Hydra Window Resize
#+BEGIN_SRC emacs-lisp
(defhydra hydra-window-resize ()
    ("j" shrink-window "down")
    ("k" enlarge-window "up")
    ("h" shrink-window-horizontally "left")
    ("l" enlarge-window-horizontally "right")
    ("=" balance-windows "balance"))
(my/leader
    "wr" 'hydra-window-resize/body)
#+END_SRC
*** COMMENT Hydra Artist Mode
#+BEGIN_SRC emacs-lisp
  ;; hydra mode that not exit after other activites
  (defhydra hydra-artist-mode (:foreign-keys run)
    ("s" artist-select-op-straight-line "line" )
    ("r" artist-select-op-rectangle "rectangle")
    ("R" artist-select-op-square "squares")
    ("a" artist-select-op-poly-line "poly-lines")
    ("S" artist-select-op-straight-poly-line "straight poly-lines")
    ("e" artist-select-op-ellipse "drawing ellipses")
    ("c" artist-select-op-circle "drawing circles")
    ("y" artist-select-op-cut-rectangle "cutting rectangles")
    ("p" artist-select-op-copy-rectangle "copying rectangles")
    ("q" nil "quit"))
  (add-hook 'artist-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c C-s") 'hydra-artist-mode/body)))
#+END_SRC
*** Hydra Flycheck
#+BEGIN_SRC emacs-lisp
(defhydra hydra-flycheck
  (:pre (progn (setq hydra-lv t) (flycheck-list-errors))
   :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
   :hint nil)
  "Errors"
  ("f"  flycheck-error-list-set-filter                            "Filter")
  ("j"  flycheck-next-error                                       "Next")
  ("k"  flycheck-previous-error                                   "Previous")
  ("gg" flycheck-first-error                                      "First")
  ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
  ("q"  nil))
  (my/leader
    "cf" 'hydra-flycheck/body)
#+END_SRC
** Hide Show Comments
#+BEGIN_SRC emacs-lisp
(use-package hide-comnt
  :ensure t
  :config
  (my/leader "ch" 'hide/show-comments-toggle))
#+END_SRC
** Chinese Support
*** Youdao Dictionary
#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :config
  (my/leader
    "oo" 'youdao-dictionary-search-at-point+))
#+END_SRC
*** Fcitx
#+BEGIN_SRC emacs-lisp
(when (string= system-type "gnu/linux")
  (use-package fcitx
	   :ensure t
	   :config
	   (setq fcitx-use-dbus t)
	   (setq fcitx-active-evil-states '(insert emacs hydrid))
	   (fcitx-org-speed-command-turn-on)
	   (fcitx-aggressive-minibuffer-turn-off)
	   (fcitx-aggressive-setup)))
#+END_SRC
** Crux
Open file with sudo if needed
#+BEGIN_SRC emacs-lisp
(use-package crux
  :diminish t
  :ensure t
  :config
  (crux-reopen-as-root-mode))
#+END_SRC

** Paradox
package.el wrapper with upgrade package bind to ~<Leader> p u~
#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure t
  :config
  (setq paradox-github-token t)
  (evil-set-initial-state 'paradox-menu-mode 'emacs)
  (my/leader
    "pr" 'paradox-list-packages
    "pu" 'paradox-upgrade-packages))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  ;; (setq projectile-switch-project-action 'projectile-dired)
  ;; Mode line
  ;; (setq projectile-mode-line
  ;; 	'(:eval (format " Proj[%s]" (projectile-project-name))))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (add-to-list 'projectile-globally-ignored-files ".tern-port"))

#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-;" . avy-goto-char)
  :config
  (my/leader "SPC" 'avy-goto-char))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (defun peter/dired-mode-hook ()
    (hl-line-mode)
    (define-key dired-mode-map "l" 'dired-find-file)
    (define-key dired-mode-map "h" 'dired-up-directory)
    (define-key dired-mode-map "j" 'dired-next-line)
    (define-key dired-mode-map "k" 'dired-previous-line)
    )

  (add-hook 'dired-mode-hook 'peter/dired-mode-hook)
  (add-hook 'dired-mode-hook 'auto-revert-mode)


  ;; (use-package all-the-icons-dired
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
** ISpell
#+BEGIN_SRC emacs-lisp
;; spell check world
(global-set-key (kbd "C-\\") 'ispell-word)
#+END_SRC
** Terminal Here
#+BEGIN_SRC emacs-lisp
(use-package terminal-here
  :ensure t
  :config
  (setq terminal-here-terminal-command '("urxvtc"))
  (my/leader
    "t" 'terminal-here))
#+END_SRC
** Fasd
#+BEGIN_SRC emacs-lisp
(defun counsel-fasd-function (str)
  (process-lines "fasd" "-l" str))

(defun counsel-fasd (&optional initial-input)
  "fasd counsel interface"
  (interactive)
  (ivy-read "fasd: " #'counsel-fasd-function
	    :initial-input initial-input
	    :dynamic-collection t
	    :require-match t
	    :sort t
	    :history 'counsel-fasd
	    :action (lambda (str)
		      (if (directory-name-p str)
			  (dired str)
			(find-file str)))
	    :caller 'counsel-fasd))

(use-package fasd
  :ensure t
  :config
  (global-fasd-mode 1)
  (my/leader
    "fd" 'counsel-fasd))
#+END_SRC
** Dumb Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :config
 (define-key evil-normal-state-map "gd" 'dumb-jump-go)
 (define-key evil-normal-state-map "gb" 'dumb-jump-back)
 (define-key evil-normal-state-map "gq" 'dumb-jump-quick-look))
#+END_SRC
** Yadm
Prerequisite: yadm version >= 1.0.8
access yadm repo via tramp
#+BEGIN_SRC emacs-lisp
(add-to-list 'tramp-methods
	     '("yadm"
	       (tramp-login-program "yadm")
	       (tramp-login-args (("enter")))
	       (tramp-login-env
		(("SHELL")
		 ("/bin/sh")))
	       (tramp-remote-shell "/bin/sh")
	       (tramp-remote-shell-login
		("-l"))
	       (tramp-remote-shell-args
		("-c"))
	       (tramp-connection-timeout 10)))


(defun reopen-as-yadm ()
  (interactive)
  (find-alternate-file
   (concat "/yadm:" (getenv "USER") "@localhost:" buffer-file-name)))

#+END_SRC
* Edit Enhancement
** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC
** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (define-key paredit-mode-map (kbd "C-j") 'eval-print-last-sexp))

(defvar peter/paredit-modes
  '(emacs-lisp-mode
    eval-expression-minibuffer-setup
    ielm-mode
    lisp-mode
    lisp-interaction-mode
    scheme-mode
    slime-repl-mode))

(cl-loop for mode in peter/paredit-modes
	 do (let ((hook (concat (symbol-name mode) "-hook")))
	      (add-hook (intern hook) #'paredit-mode)))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :ensure t
  :config
  (smartparens-global-mode t)
  (require 'smartparens-config))
#+END_SRC
*** Smartparens Keybinding
#+BEGIN_SRC emacs-lisp
(define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
(define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)

(define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-a") 'sp-backward-down-sexp)
(define-key smartparens-mode-map (kbd "C-S-d") 'sp-beginning-of-sexp)
(define-key smartparens-mode-map (kbd "C-S-a") 'sp-end-of-sexp)

;; (define-key smartparens-mode-map (kbd "C-M-e") 'sp-up-sexp)
(define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

(define-key smartparens-mode-map (kbd "C-M-n") 'sp-next-sexp)
(define-key smartparens-mode-map (kbd "C-M-p") 'sp-previous-sexp)

(define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
(define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

(define-key smartparens-mode-map (kbd "M-<delete>") 'sp-unwrap-sexp)
(define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

(define-key smartparens-mode-map (kbd "C-<right>") 'sp-forward-slurp-sexp)
(define-key smartparens-mode-map (kbd "C-<left>") 'sp-forward-barf-sexp)
(define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
(define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-backward-barf-sexp)

(define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)
(define-key smartparens-mode-map (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
(define-key smartparens-mode-map (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
(define-key smartparens-mode-map (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

(define-key smartparens-mode-map (kbd "C-]") 'sp-select-next-thing-exchange)
(define-key smartparens-mode-map (kbd "C-<left_bracket>") 'sp-select-previous-thing)
(define-key smartparens-mode-map (kbd "C-M-]") 'sp-select-next-thing)

(define-key smartparens-mode-map (kbd "M-F") 'sp-forward-symbol)
(define-key smartparens-mode-map (kbd "M-B") 'sp-backward-symbol)

(bind-key "C-c f" (lambda () (interactive) (sp-beginning-of-sexp 2)) smartparens-mode-map)
(bind-key "C-c b" (lambda () (interactive) (sp-beginning-of-sexp -2)) smartparens-mode-map)

(bind-key "C-M-s"
          (defhydra smartparens-hydra ()
            "Smartparens"
            ("d" sp-down-sexp "Down")
            ("e" sp-up-sexp "Up")
            ("u" sp-backward-up-sexp "Up")
            ("a" sp-backward-down-sexp "Down")
            ("f" sp-forward-sexp "Forward")
            ("b" sp-backward-sexp "Backward")
            ("k" sp-kill-sexp "Kill" :color blue)
            ("q" nil "Quit" :color blue))
            smartparens-mode-map)

(bind-key "H-t" 'sp-prefix-tag-object smartparens-mode-map)
(bind-key "H-p" 'sp-prefix-pair-object smartparens-mode-map)
(bind-key "H-y" 'sp-prefix-symbol-object smartparens-mode-map)
(bind-key "H-h" 'sp-highlight-current-sexp smartparens-mode-map)
(bind-key "H-e" 'sp-prefix-save-excursion smartparens-mode-map)
(bind-key "H-s c" 'sp-convolute-sexp smartparens-mode-map)
(bind-key "H-s a" 'sp-absorb-sexp smartparens-mode-map)
(bind-key "H-s e" 'sp-emit-sexp smartparens-mode-map)
(bind-key "H-s p" 'sp-add-to-previous-sexp smartparens-mode-map)
(bind-key "H-s n" 'sp-add-to-next-sexp smartparens-mode-map)
(bind-key "H-s j" 'sp-join-sexp smartparens-mode-map)
(bind-key "H-s s" 'sp-split-sexp smartparens-mode-map)
(bind-key "H-s r" 'sp-rewrap-sexp smartparens-mode-map)
(defvar hyp-s-x-map)
(define-prefix-command 'hyp-s-x-map)
(bind-key "H-s x" hyp-s-x-map smartparens-mode-map)
(bind-key "H-s x x" 'sp-extract-before-sexp smartparens-mode-map)
(bind-key "H-s x a" 'sp-extract-after-sexp smartparens-mode-map)
(bind-key "H-s x s" 'sp-swap-enclosing-sexp smartparens-mode-map)

(bind-key "C-x C-t" 'sp-transpose-hybrid-sexp smartparens-mode-map)

(bind-key ";" 'sp-comment emacs-lisp-mode-map)

(bind-key [remap c-electric-backspace] 'sp-backward-delete-char smartparens-strict-mode-map)
#+END_SRC
* Org Mode
** Org Mode Setup
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "\C-cc") 'org-capture)
(global-set-key (kbd "\C-ca") 'org-agenda)
(global-set-key (kbd "\C-cl") 'org-store-link)
(evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point)
(evil-define-key 'normal org-mode-map (kbd "g'") 'org-edit-special)
(setq org-startup-indented t)
(setq org-startup-folded t)
(setq org-hide-emphasis-markers t)
(setq org-imenu-depth 5)
(my/leader
  ;; "op" 'org-mobile-push
  ;; "oP" 'org-mobile-pull
  "as" 'org-clock-goto
  "aw" 'org-agenda-list
  "aa" 'org-todo-list
  "ac" 'org-capture)
;; diminish org-indent-mode
(eval-after-load 'org-indent '(diminish 'org-indent-mode))

(my/leader-mode :keymaps 'org-mode
  "i" 'counsel-org-goto)

;; disable time dispaly for mode line compatibility
(setq org-timer-display nil)

;; line wrap in org mode
(add-hook 'org-mode-hook 'visual-line-mode)

;; narrow to subtree after selecting entry in org agenda
(add-hook 'org-clock-goto-hook 'org-narrow-to-subtree)
(advice-add 'org-agenda-switch-to :after #'org-narrow-to-subtree)
#+END_SRC
** Org Agenda
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d)" "CANCELED(c@)")))
(setq org-default-notes-file "~/Nextcloud/org/inbox.org")
(setq org-agenda-files
      (list "~/Nextcloud/org/inbox.org"
	    "~/Nextcloud/org/project.org"
	    "~/Nextcloud/org/someday.org"
	    "~/Nextcloud/org/todo.org"))
(setq org-directory "~/Nextcloud/org")
;; (setq org-mobile-inbox-for-pull "~/Nextcloud/org/flagged.org")
;; (setq org-mobile-directory "~/Nextcloud/MobileOrg")
(setq org-log-done 'time)
(setq org-log-states-order-reversed nil)

;; org refile
(setq org-refile-targets '((nil :maxlevel . 2)
			   (org-agenda-files :maxlevel . 2)))
;; Refile in a single go
(setq org-outline-path-complete-in-steps nil)
;; Show full paths for refiling
(setq org-refile-use-outline-path t)

(defun peter/agenda-mode-config ()
  "agenda mode key bindings and config"
  (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
  (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)
  (define-key org-agenda-mode-map "g" 'org-agenda-goto-date)
  (define-key org-agenda-mode-map "n" 'org-agenda-capture)
  (define-key org-agenda-mode-map "p" 'org-pomodoro)
  (define-key org-agenda-mode-map (kbd "C-e") 'evil-scroll-line-down)
  (define-key org-agenda-mode-map (kbd "C-y") 'evil-scroll-line-up)
  (hl-line-mode))

(add-hook 'org-agenda-mode-hook 'peter/agenda-mode-config)
#+END_SRC
** Org Modules
#+BEGIN_SRC emacs-lisp
;; org modules
(add-to-list 'org-modules 'org-habit)
(add-to-list 'org-modules 'org-protocol)
(add-to-list 'org-modules 'org-man)
;; load modules
(require 'org-habit)
(require 'org-protocol)
(require 'org-man)
#+END_SRC
** Org Caputre
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("i" "Inbox" entry (file+headline "~/Nextcloud/org/inbox.org" "Tasks")
	 "* TODO %?\n %i\n %a")
	("j" "Journal" entry (file+datetree "~/Nextcloud/org/journal.org")
	 "* %?\nEntered on %U\n %i\n")
	("x" "org-protocol" entry (file "~/Nextcloud/org/web.org")
	 "* %^{Title}\nSource: [[%:link][%:description]]\n#+BEGIN_QUOTE\n%:initial\n#+END_QUOTE"
	 :empty-line 1)
	("w" "vocabulary prompt" plain (file "~/Nextcloud/org/vocabulary.org")
	 "%(call-interactively #'my-vocabulary-format-result-prompt)")))

(defun my-vocabulary-format-result (word)
  "Format request result of WORD."
  (let* ((json (youdao-dictionary--request word))
         (query        (assoc-default 'query       json)) ; string
         (translation  (assoc-default 'translation json)) ; array
         (errorCode    (assoc-default 'errorCode   json)) ; number
         (web          (assoc-default 'web         json)) ; array
         (basic        (assoc-default 'basic       json)) ; alist
         ;; construct data for display
         (phonetic (assoc-default 'phonetic basic))
         (translation-str (mapconcat
                           (lambda (trans) (concat " " trans))
                           translation "\n"))
         (basic-explains-str (mapconcat
                              (lambda (explain) (concat " " explain))
                              (assoc-default 'explains basic) "\n"))
         (web-str (mapconcat
                   (lambda (k-v)
                     (format " %s :: %s"
                             (assoc-default 'key k-v)
                             (mapconcat 'identity (assoc-default 'value k-v) "; ")))
                   web "\n")))
    (if basic
        (format "** English          :drill:\n*%s* /%s/\n*** Translation\n%s\n Web References\n%s\n"
                query phonetic basic-explains-str web-str)
      (format "** English\n%s\n*** Translation\n%s\n"
              query translation-str))))

(defun my-vocabulary-format-result-prompt ()
  "Format request result of WORD."
  (interactive)
  (let* ((json (youdao-dictionary--request (read-from-minibuffer "word: ")))
         (query        (assoc-default 'query       json)) ; string
         (translation  (assoc-default 'translation json)) ; array
         (errorCode    (assoc-default 'errorCode   json)) ; number
         (web          (assoc-default 'web         json)) ; array
         (basic        (assoc-default 'basic       json)) ; alist
         ;; construct data for display
         (phonetic (assoc-default 'phonetic basic))
         (translation-str (mapconcat
                           (lambda (trans) (concat " " trans))
                           translation "\n"))
         (basic-explains-str (mapconcat
                              (lambda (explain) (concat " " explain))
                              (assoc-default 'explains basic) "\n"))
         (web-str (mapconcat
                   (lambda (k-v)
                     (format " %s :: %s"
                             (assoc-default 'key k-v)
                             (mapconcat 'identity (assoc-default 'value k-v) "; ")))
                   web "\n")))
    (if basic
        (format "** English          :drill:\n*%s* /%s/\n*** Translation\n%s\n Web References\n%s\n"
                query phonetic basic-explains-str web-str)
      (format "** English\n%s\n*** Translation\n%s\n"
              query translation-str))))
#+END_SRC
** Org Protocol
#+BEGIN_SRC emacs-lisp
(defun my-vocabulary-write (word)
  (write-region
   (my-vocabulary-format-result word)  nil
   my-vocabulary-path t))

(defvar my-vocabulary-path "/home/peterzky/Nextcloud/org/vocabulary.org")

(defun org-protocol-vocabulary (fname)
  (let* ((splitparts (org-protocol-parse-parameters fname t))
         (w (plist-get splitparts :word)))
    (my-vocabulary-write w)
(message "word saved %s" w))
  nil)

(add-to-list 'org-protocol-protocol-alist
	     '("Vocabulary" :protocol "vocabulary" :function org-protocol-vocabulary))
#+END_SRC
** COMMENT Org Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)

(require 'org-mime)

(setq org-mime-library 'mml)


(add-hook 'message-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-htmlize)))

(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                           "#E6E1DC" "#232323"))))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))
#+END_SRC
** Org Evil Management
#+BEGIN_SRC emacs-lisp
;; Enter insert state when opening log buffer
(add-hook 'org-log-buffer-setup-hook 'evil-insert-state)
;; Org capture initial state insert
(add-hook 'org-capture-mode-hook 'evil-insert-state)
;; Org src initial insert state
(add-hook 'org-src-mode-hook 'evil-insert-state)
#+END_SRC
** Org Plot
#+BEGIN_SRC emacs-lisp
(use-package gnuplot-mode
  :ensure t)
#+END_SRC
** Org Babel
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
(setq org-src-preserve-indentation t)
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)
    (gnuplot . t)
    )
)
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("â" "â" "â" "â" "â" "â¯" "â" )))
#+END_SRC
** Org Pomodoro
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :ensure t
  :config
  (setq org-pomodoro-keep-killed-pomodoro-time t)
  (setq org-clock-continuously t)
  (global-set-key [f2] 'org-pomodoro)
  (global-set-key (kbd "C-x t") 'org-pomodoro))

(add-hook 'org-clock-out-hook #'org-pomodoro-kill)
#+END_SRC
** Org Brain
#+BEGIN_SRC emacs-lisp
(use-package org-brain
  :ensure t
  :init
  (when (file-exists-p "~/Nextcloud")
    (setq org-brain-path "~/Nextcloud/org/brain"))
  (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
  :config
  ;; (org-brain-activate-cache-saving)
  (my/leader
    "oa" 'org-brain-visualize
    "oe" 'org-brain-deft)
  (define-key org-brain-visualize-mode-map "/" 'org-brain-deft))

(defun org-brain-deft ()
  "Use `deft' for files in `org-brain-path'."
  (interactive)
  (let ((deft-directory org-brain-path)
	(deft-recursive t)
	(deft-extensions '("org")))
    (deft)))


(use-package link-hint
  :ensure t
  :config
  (define-key org-brain-visualize-mode-map (kbd "C-l") #'link-hint-open-link))

(use-package ascii-art-to-unicode
  :ensure t
  :config
  (defun aa2u-buffer ()
    (aa2u (point-min) (point-max)))

  (add-hook 'org-brain-after-visualize-hook #'aa2u-buffer))
#+END_SRC
** Org Latex
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
(setq tex-compile-commands '(("xelatex %r")))
(setq tex-command "xelatex")
(setq-default TeX-engine 'xelatex)
(setq org-latex-classes
      '(("article"
	 "
\\documentclass{ctexart}
\\usepackage{hyperref}
\\hypersetup{
  colorlinks=true,
  linkcolor=[rgb]{0,0.37,0.53},
  citecolor=[rgb]{0,0.47,0.68},
  filecolor=[rgb]{0,0.37,0.53},
  urlcolor=[rgb]{0,0.37,0.53},
  pagebackref=true,
  linktoc=all,}
	 "

	 ("\\section{%s}" . "\\section*{%s}")
	 ("\\subsection{%s}" . "\\subsection*{%s}")
	 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	 ("\\paragraph{%s}" . "\\paragraph*{%s}")
	 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
	))
#+END_SRC
** Deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config
  (evil-set-initial-state 'deft-mode 'emacs)
  (evil-set-initial-state 'artist-mode 'emacs)
  (my/leader
    "ae" 'deft)
  (setq deft-extensions '("org"))
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename t)
  ;; (setq deft-org-mode-title-prefix t)
  (setq deft-default-extension "org")
  (setq deft-directory "~/Nextcloud/org/brain")
  (setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase))))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :diminish ivy-mode ivy-minor-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
	enable-recursive-minibuffers t
	ivy-count-format "%d/%d "))

(defun ivy-open-other-window (x)
  (find-file-other-window x))

(ivy-set-actions t '(("i" ivy-open-other-window "open other window")))

(use-package ivy-rich
  :ensure t
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
  (setq ivy-virtual-abbreviate 'full
	ivy-rich-switch-buffer-align-virtual-buffer t)
  (setq ivy-rich-abbreviate-paths t))
#+END_SRC
** Ivy Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "s-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> c") 'helpful-command)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f1> b") 'counsel-descbinds)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)
(my/leader
  "ag" 'counsel-ag
  "`"  'ivy-switch-buffer
  "d"  'counsel-yank-pop
  "m"  'counsel-mark-ring
  "s"  'swiper
  "bb" 'ivy-switch-buffer
  "pp" 'projectile-switch-project
  "pf" 'projectile-find-file-dwim
  "i"  'counsel-imenu
  "fl" 'counsel-locate
  "gg" 'counsel-git-grep
  "ff" 'counsel-find-file
  "vv"  'ivy-push-view
  "vo" 'ivy-pop-view)

(define-key ivy-mode-map (kbd "C-l") 'ivy-backward-delete-char)
#+END_SRC
** Packages Compatibility
#+BEGIN_SRC emacs-lisp
(setq magit-completing-read-function 'ivy-completing-read)
(setq projectile-completion-system 'ivy)
#+END_SRC
* Completion and Error Checking
** Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (define-key company-active-map (kbd "C-n") #'company-select-next-or-abort)
  (define-key company-active-map (kbd "C-p") #'company-select-previous-or-abort)
  (define-key company-active-map (kbd "C-h") #'company-quickhelp-manual-begin))

(use-package company-quickhelp
  :ensure t
  :config
  (company-quickhelp-mode 1)
  (setq company-quickhelp-delay nil))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :ensure t
  :config
  (yas-global-mode 1)
  (my/leader
    "yn" 'yas-new-snippet
    "yv" 'yas-visit-snippet-file
    "yt" 'yas-describe-tables
    "yi" 'yas-insert-snippet))
#+END_SRC
** Ycmd
In Gentoo you need to install ~sys-libs/ncurses:5~ with *tinfo* use flag
slot 5 indicate version 5, which ycmd depend on.
#+BEGIN_SRC emacs-lisp
(use-package ycmd
  :ensure t
  :config
  (setq  ycmd-server-command '("ycmd"))
  (setq ycmd-global-config
	(file-truename "~/.emacs.d/config/ycm_extra_conf.py")))
#+END_SRC
* Programming Language Supports
** C
#+BEGIN_SRC emacs-lisp
(use-package google-c-style
  :ensure t)

(use-package company-ycmd
  :ensure t)

(defun peter/c-mode-hook ()
  (google-set-c-style)
  (google-make-newline-indent)
  (ycmd-mode)
  (setq-local helm-dash-docsets '("C"))
  (set (make-local-variable 'company-backends) nil)
  (company-ycmd-setup)
  (local-set-key (kbd "C-c C-j") 'ycmd-goto)
  (local-set-key (kbd "C-c C-d") 'ycmd-show-documentation)
  (local-set-key (kbd "C-c C-h") 'woman))

(add-hook 'c-mode-common-hook 'peter/c-mode-hook)
#+END_SRC
** Go
Go-mode dependencies
#+BEGIN_SRC sh :result no
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u github.com/nsf/gocode
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u github.com/rogpeppe/godef
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u golang.org/x/tools/cmd/goimports
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u github.com/motemen/gore
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u github.com/alecthomas/gometalinter
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u github.com/zmb3/gogetdoc
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u golang.org/x/tools/cmd/guru
http_proxy="http://localhost:8123" https_proxy="http://localhost:8123" go get -u golang.org/x/tools/cmd/gorename
gometalinter --install
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(use-package gorepl-mode
  :ensure t
  :diminish gorepl-mode
  :config
  (add-hook 'go-mode-hook #'gorepl-mode))

(use-package company-go
  :ensure t
  :init
  (progn
    (setq company-go-show-annotation nil)))

(use-package gotest
  :ensure t)

(use-package go-guru
  :ensure t
  :config
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

(use-package go-playground :ensure t)

(use-package go-rename :ensure t)

(use-package go-eldoc
  :ensure t
  :diminish eldoc-mode
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))

(defun peter/go-mode-hook ()
  (interactive)
  (setq-local helm-dash-docsets '("Go"))
  (local-set-key (kbd "C-c C-d") 'godoc-at-point)
  (local-set-key (kbd "C-c r") 'go-rename)
  (local-set-key [f5] 'peter/go-install-or-run))

(defun peter/go-install-or-run ()
  (interactive)
  (cond ((bound-and-true-p go-playground-mode)
	 (go-playground-exec))
	((string= (buffer-substring-no-properties 1 13) "package main")
	 (go-run))
	(t (compile "go install"))))

(use-package go-mode
  :ensure t
  :config
  (setq go-playground-basedir "~/golang/src/playground")
  (setq gofmt-command "goimports")
  (setq godoc-at-point-function 'godoc-gogetdoc)
  (add-hook 'go-mode-hook 'peter/go-mode-hook)
  (add-hook 'before-save-hook 'gofmt-before-save)
  (add-hook 'go-mode-hook (lambda ()
			    (set (make-local-variable 'company-backends) '(company-go company-files))
			    (company-mode))))

(use-package flycheck-gometalinter
  :ensure t
  :config
  (flycheck-gometalinter-setup))
#+END_SRC
** Haskell intero
nixos config
~$HOME/.stack/config.yaml~
#+BEGIN_SRC yaml
nix:
  enable: true
#+END_SRC

~$HOME/.stack/global-project/stack.yaml~
#+BEGIN_SRC yaml
flags: {}
extra-package-dbs: []
packages: []
extra-deps: []
resolver: lts-9.0
nix:
  packages:
    - libcxx
    - icu
    - gcc
    - ncurses
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package intero
  :ensure t
  :config
  (intero-global-mode 1)
  (general-define-key :states '(normal emacs)
		      :keymaps 'intero-mode-map
		      :prefix "C-c"
		      "C-d" 'intero-info
		      "C-j" 'intero-goto-definition))
#+END_SRC
** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :diminish rainbow-delimiters-mode
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'peter/emacs-mode-hook))

(defun peter/emacs-mode-hook ()
  (local-set-key (kbd "C-j") 'eval-print-last-sexp))
#+END_SRC
** Nixos
#+BEGIN_SRC emacs-lisp
(when (file-exists-p "~/Nextcloud")
  (use-package nix-mode
	   :load-path "~/Nextcloud/site-lisp/nix-mode"
	   :ensure t
	   :config
	   (add-hook 'nix-mode-hook
		     (lambda ()
		       (set (make-local-variable 'company-backends) '(company-nixos-options company-files))))))

(use-package company-nixos-options
  :ensure t)
#+END_SRC
** Rust
Rust-mode dependencies
#+BEGIN_SRC sh :result no
cargo install racer
cargo install rustfmt
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :config
  (setq rust-format-on-save t)
  (add-hook 'rust-mode-hook #'racer-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (define-key rust-mode-map (kbd "C-c C-j") #'racer-find-definition)
  (define-key rust-mode-map (kbd "C-c C-d") #'racer-describe)
  (setq company-tooltip-align-annotations t))

(use-package racer
  :ensure t
  :config
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))

(use-package cargo
  :ensure t
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

(use-package toml-mode
  :ensure t)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable))
#+END_SRC
** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "sbcl")
  (setq slime-contribs '(slime-fancy))
  (slime-setup '(slime-fancy slime-company)))

(use-package slime-company
  :ensure t)
#+END_SRC
** COMMENT Haskell haskell-mode
[[https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md#ghc-mod][Haskell Mode Tutorail]]
Haskell dependencies
#+BEGIN_SRC sh
stack --nix install ghc-mod structured-haskell-mode happy hindent stylish-haskell
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hindent
  :ensure t
  :config
  (add-hook 'haskell-mode-hook #'hindent-mode))

(use-package ghc
  :ensure t
  :config
  (add-hook 'haskell-mode-hook (lambda () (ghc-init))))

(use-package company-ghc
  :ensure t)

;; (use-package shm
;;   :ensure t
;;   :config
;;   (add-hook 'haskell-mode-hook 'structured-haskell-mode))

(use-package haskell-mode
  :ensure t
  :config
  (setq haskell-stylish-on-save t)
  (add-hook 'haskell-mode-hook 'my-haskell-mode-hook)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode))

(use-package scion
  :ensure t
  :config)

(defun my-haskell-mode-hook ()
  (smartparens-mode -1)
  (local-set-key "\C-c\C-d" 'ghc-browse-document)
  (set (make-local-variable 'company-backends) '(company-ghc company-files)))
  #+END_SRC
** COMMENT Octave
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'inferior-octave-mode 'emacs)
#+END_SRC
** COMMENT Javascript
#+BEGIN_SRC emacs-lisp
(defun peter/js-comint-kbd ()
  (local-set-key "\C-x\C-e" 'js-send-last-sexp)
  (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
  (local-set-key "\C-cb" 'js-send-buffer)
  (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
  (local-set-key "\C-cl" 'js-load-file-and-go))

(use-package company-tern
  :diminish tern-mode
  :ensure t)

(add-to-list 'company-backends 'company-tern)

(use-package js-comint
    :ensure t
    :config
    (add-hook 'js2-mode-hook 'peter/js-comint-kbd)
    )

(use-package json-mode
    :ensure t
    :config)

(use-package web-beautify
  :ensure t
  :config)


(use-package tern
  :ensure t)

(use-package js2-mode
  :ensure t
  :interpreter "node"
  :config
  (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
  )

(use-package emmet-mode
  :ensure t)

(global-set-key [C-tab] 'emmet-expand-yas)

;; (add-hook 'js2-mode-hook #'smartparens-mode)
(add-hook 'html-mode 'emmet-mode)
(add-hook 'js2-jsx-mode 'emmet-mode)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))

;;jsx mode
(add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))

(evil-define-key 'normal js2-mode-map (kbd "gd") 'tern-find-definition)
(evil-define-key 'normal js2-mode-map (kbd "g=") 'web-beautify-js)
(evil-define-key 'normal js2-mode-map (kbd "gp") 'run-js)


;;fix smartparens curly braces issue
(sp-local-pair 'js2-mode "{" "}" :actions '(:rem insert))
#+END_SRC
** COMMENT ReactJS
#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :ensure t)

(defun react/post-init-evil-matchit()
  (with-eval-after-load 'evil-matchit
    (plist-put evilmi-plugins 'react-mode '((evilmi-simple-get-tag evilmi simple-jump)
					    (evilmi-javascript-get-tag evilmi-javascript-jump)
					    (evilmi-html-get-tag evilmi-html-jump)))))


(use-package flycheck
  :ensure t
  :config
  (progn
      (flycheck-add-mode 'javascript-eslint 'react-mode)
      (defun react/disable-jshint ()
	(push 'javascript-jshint flycheck-disabled-checkers))
      (add-hook 'react-mode-hook #'react/disable-jshint)))



(defun react/post-init-js2-mode ()
  (add-hook 'react-mode-hook 'js2-minor-mode))

(defun react/post-init-web-mode ()
  (define-derived-mode react-mode web-mode "react")
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . react-mode))
  (add-to-list 'auto-mode-alist '("\\.react.js\\'" . react-mode))
  (add-to-list 'auto-mode-alist '("\\index.android.js\\'" . react-mode))
  (add-to-list 'auto-mode-alist '("\\index.ios.js\\'" . react-mode))
  (add-to-list 'magic-mode-alist '("/\\*\\* @jsx React\\.DOM \\*/" . react-mode))
  (defun react/setup-react-mode ()
    "Adjust web-mode to accommodate react-mode"
    (emmet-mode 0)
    ;; See https://github.com/CestDiego/emmet-mode/commit/3f2904196e856d31b9c95794d2682c4c7365db23
    (setq-local emmet-expand-jsx-className? t)
    ;; Enable js-mode snippets
    (yas-activate-extra-mode 'js-mode)
    ;; Force jsx content type
    (web-mode-set-content-type "jsx")
    ;; Don't auto-quote attribute values
    (setq-local web-mode-enable-auto-quoting nil)
    ;; Why do we do this ?
    (defadvice web-mode-highlight-part (around tweak-jsx activate)
      (let ((web-mode-enable-part-face nil))
        ad-do-it)))
(add-hook 'react-mode-hook 'react/setup-react-mode))
#+END_SRC
** COMMENT Sml
#+BEGIN_SRC emacs-lisp
(use-package sml-mode
    :ensure t
    :config
    )

(setenv "PATH" (concat (getenv "PATH") ":/home/peterzky/playground/smlnj/bin"))
(setq exec-path (append exec-path '("/home/peterzky/playground/smlnj/bin")))
#+END_SRC
* Other Modes
#+BEGIN_SRC emacs-lisp
(diminish 'auto-revert-mode)

(use-package abbrev
  :diminish abbrev-mode)

(use-package auto-compile
  :ensure t
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
;;For editing systemd file
(use-package systemd
  :ensure t)

(use-package yaml-mode
  :ensure t)
#+END_SRC
* Mail
** Send Mail
#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'message-send-mail-with-sendmail)
(setq sendmail-program "msmtp")
; tell msmtp to choose the SMTP server according to the from field in the outgoing email
(setq message-sendmail-extra-arguments '("--read-envelope-from"))
(setq message-sendmail-f-is-evil 't)
#+END_SRC
** Mu4e
#+BEGIN_SRC emacs-lisp
;; nixos add to load path
(let ((mu4epath
       (concat
        (f-dirname
         (file-truename
          (executable-find "mu")))
        "/../share/emacs/site-lisp/mu4e")))
  (when (and
         (string-prefix-p "/nix/store/" mu4epath)
         (file-directory-p mu4epath))
    (add-to-list 'load-path mu4epath)))


(use-package evil-mu4e
  :ensure t)

(require 'mu4e)

(my/leader
  "0" 'mu4e)

(add-to-list 'mu4e-view-actions
	     '("browser" . mu4e-action-view-in-browser) t)

(setq mu4e-maildir "~/.mail")

(setq mu4e-sent-messages-behavior 'delete)

(setq mu4e-maildir-shortcuts
      '( ("/sina/Inbox"            . ?a)
	 ("/qq/Inbox"              . ?q)
	 ("/icloud/Inbox"         . ?c)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "mbsync -a")

(setq
 user-mail-address "378096232@qq.com"
 user-full-name  "Peter Zheng"
 mu4e-compose-signature
 (concat
  "Peter Zheng "
  "peter.zky@qq.com"))

(setq message-kill-buffer-on-exit t)
(setq mu4e-view-show-images t)
(setq mu4e-html2text-command "w3m -T text/html")



(setq mu4e-use-fancy-chars t)
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-headers-skip-duplicates t)

(evil-define-key 'motion 'mu4e-main-mode-map
  (kbd "u") 'mu4e-update-index
  (kbd "U") 'mu4e-update-mail-and-index)

(evil-define-key 'motion 'mu4e-headers-mode-map
  (kbd "%") 'mu4e-headers-mark-pattern)

(add-hook 'mu4e-main-mode-hook #'mu4e-update-index)

#+END_SRC
** COMMENT NotMuch
#+BEGIN_SRC emacs-lisp
(let ((notmuchpath
       (concat
        (f-dirname
         (file-truename
          (executable-find "notmuch")))
        "/../share/emacs/site-lisp/")))
  (when (and
         (string-prefix-p "/nix/store/" notmuchpath)
         (file-directory-p notmuchpath))
    (add-to-list 'load-path notmuchpath)))

(require 'notmuch)
#+END_SRC
