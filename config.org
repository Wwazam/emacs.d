#+TITLE:My Emacs Config
#+PROPERTY: header-args :tangle yes

~C-c ;~ to comment out unwanted section

* Settings
** Defaults
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq use-dialog-box nil)
(line-number-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(delete-selection-mode 1)

(fset 'yes-or-no-p 'y-or-n-p)
(setq help-window-select t)
(setq vc-follow-symlinks "Follow link")
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
(recentf-mode 1)
(setq Man-notify-method 'pushy)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq initial-scratch-message "")
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; mouse cursor
(mouse-avoidance-mode 'none)
;; start server if not started
(require 'server)
(unless (server-running-p) (server-start))

(setq gc-cons-threshold 20000000)

(setq compilation-scroll-output t)

(add-to-list 'safe-local-eval-forms '(reopen-as-yadm))

(add-to-list 'safe-local-eval-forms '(setq-local helm-dash-docsets '("C++" "OpenCV C++")))

(put 'projectile-project-compilation-cmd 'safe-local-variable #'stringp)

(if (eq system-type 'gnu/linux)
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "firefox"))

#+END_SRC
** Functions
#+BEGIN_SRC emacs-lisp
(defun peter/switch-buffer ()
  "switch to last buffer"
  (interactive)
  (if (evil-alternate-buffer)
      (switch-to-buffer (car (evil-alternate-buffer)))
    (switch-to-buffer (other-buffer (current-buffer) t))))

(defmacro peter/edit-file (file)
  "open file and widen if narrowed."
  `(lambda nil (interactive)
     (find-file ,file)
     (when (buffer-narrowed-p)
       (widen))))

;; close window after kill buffer command
(advice-add 'kill-this-buffer :after #'delete-window)

(defun peter/split-vertically ()
  "Split window vertically and focus"
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun peter/split-horizontally ()
  "Split window horizontally and focus"
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(defun peter/widen ()
  "after widen scroll down"
  (interactive)
  (widen)
  (scroll-down 8))

(global-set-key (kbd "C-x k") 'kill-this-buffer)

(global-set-key (kbd "C-x C-r") 'revert-buffer)

(defun peter/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
		"\\(\\s-*\\)\\s-" 1 0 t))

(defun read-curl ()
  "Insert url content into corrent buffer"
    (interactive)
      (let ((url (read-string "url: ")))
	    (shell-command (concat "curl -Ls -x socks5://127.0.0.1:1080 " url) t)))
#+END_SRC
* Evil Mode
** Evil General
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (setq evil-insert-state-map (make-sparse-keymap))
  (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
  (evil-define-key 'motion help-mode-map (kbd "<tab>") 'forward-button)
  (evil-define-key 'motion help-mode-map (kbd "S-<tab>") 'backward-button))

(setq evil-normal-state-tag " <N>"
      evil-insert-state-tag " <I>"
      evil-motion-state-tag " <M>"
      evil-emacs-state-tag  " <E>"
      evil-visual-state-tag " <V>"
      evil-motion-state-cursor	'(box "#663399")
      evil-normal-state-cursor	'(box "YellowGreen")
      evil-insert-state-cursor	'(bar "#F86155")
      evil-emacs-state-cursor	'(bar "SkyBlue2")
      evil-visual-state-cursor	'(box "gray"))
#+END_SRC
** Evil Leader
#+BEGIN_SRC emacs-lisp
(defvar peter/leader-map (make-sparse-keymap))

(define-key evil-normal-state-map (kbd "SPC") peter/leader-map)
(define-key evil-motion-state-map (kbd "SPC") peter/leader-map)
(define-key evil-emacs-state-map (kbd "M-SPC") peter/leader-map)
(evil-define-key 'motion Info-mode-map (kbd "SPC") peter/leader-map)

(defmacro my/leader (args)
  `(cl-loop for elem in ,args
	    do (define-key peter/leader-map (kbd (car elem)) (cdr elem))))

(my/leader
 `(("fs" .  save-buffer)
   ("fa" .  add-file-local-variable-prop-line)
   ("he" .  elisp-index-search)
   ("qq" .  delete-frame)
   ("qQ" .  save-buffers-kill-emacs)
   ("r"  .   deer)
   ;; window management
   ("wv" .  peter/split-horizontally)
   ("ws" .  peter/split-vertically)
   ("ww" .  other-window)
   ("wd" .  delete-window)
   ;; text to speech
   ("op" .  hydra-tts-menu/body)
   ;;file access
   ("cg" . customize-group)
   ("cc" .  flycheck-mode)
   ("cl" .  evilnc-comment-or-uncomment-lines)
   ("fed" . ,(peter/edit-file "~/.emacs.d/config.org"))
   ("fea" . ,(peter/edit-file "~/Sync/org/agenda/archive.org"))
   ("fei" . ,(peter/edit-file "~/Sync/org/agenda/inbox.org"))
   ("fep" . ,(peter/edit-file "~/Sync/org/agenda/project.org"))
   ("TAB" . peter/switch-buffer)))
#+END_SRC
** Evil State
[[https://github.com/bling/dotemacs/blob/master/config/init-evil.el][dotemacs/init-evil.el at master Â· bling/dotemacs]]
#+BEGIN_SRC emacs-lisp
(defmacro peter/evil-state (state list)
  `(cl-loop for mode in ,list
	    do (add-to-list ,state mode)))

(defvar peter/motion-state-modes
  '(special-mode go-guru-output-mode racer-help-mode helpful-mode
		 intero-help-mode messages-buffer-mode youdao-dictionary-mode makey-key-mode))

(defvar peter/emacs-state-modes
  '(artist-mode dired-mode ivy-occur-mode view-mode debugger-mode
		intero-repl-mode org-wiki-panel-minor-mode elfeed-search-mode
		elfeed-show-mode finder-mode image-mode))

(defvar peter/insert-state-hooks
  '(org-src-mode-hook org-log-buffer-setup-hook
		      org-capture-mode-hook git-commit-mode-hook))

(defvar peter/emacs-state-minor-modes
  '(edebug-mode))


(peter/evil-state 'evil-motion-state-modes peter/motion-state-modes)

(peter/evil-state 'evil-emacs-state-modes peter/emacs-state-modes)

(cl-loop for hook in peter/insert-state-hooks do
	 (add-hook hook 'evil-insert-state))

(cl-loop for mode in peter/emacs-state-minor-modes
	 do (let ((hook (concat (symbol-name mode) "-hook")))
	      (add-hook (intern hook) `(lambda ()
					 (if ,mode
					     (evil-emacs-state)
					   (evil-normal-state))))))
#+END_SRC
** Evil Magit
#+BEGIN_SRC emacs-lisp
(use-package evil-magit :ensure t)
#+END_SRC
** Evil Nerd Commenter
text object ~c~ as comment
operator ~,,~ as comment
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :ensure t
  :config
  (evilnc-default-hotkeys))
#+END_SRC
** Evil Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC
* Looks/Feels
** Fonts
#+BEGIN_SRC emacs-lisp
(defun my:set-font (FONT)
  (interactive)
  (set-face-attribute 'default t :font FONT)
  (set-frame-font FONT nil t))

(defun my:font-select ()
  (interactive)
  (ivy-read "set font: "
	    my:font-list
	    :action (lambda (select)
		      (my:set-font select))))

(defvar my:font-list
  '("Hack-10" "Iosevka-12" "Fira Code-10"
    "DejaVu Sans Mono-11"))
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
;; theme packages
(use-package color-theme-sanityinc-tomorrow :ensure t)
(use-package doom-themes :ensure t)

(defvar my:dark-light-themes
;'(gruvbox-dark-medium gruvbox-light-medium)
  '(;; doom-one-light
    ;; doom-nord-light
    adwaita
    doom-vibrant)
  )

(defun my:switch-themes ()
  "switch between dark and light theme"
  (interactive)
  (let ((dark (car my:dark-light-themes))
	(light (cadr my:dark-light-themes)))
    (if (eq (car custom-enabled-themes) dark)
	(progn
	  (mapcar 'disable-theme custom-enabled-themes)
	  (load-theme light t))
      (progn
	(mapcar 'disable-theme custom-enabled-themes)
	(load-theme dark t)))))

;; default theme
(load-theme (car my:dark-light-themes) t)

(my/leader '(("uo" . counsel-load-theme)
	     ("ui" . my:font-select)
	     ("uu" . my:switch-themes)))
#+END_SRC
** Mode Line
*** Smart Mode Line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (setq sml/no-confirm-load-theme t
	sml/theme nil
	sml/mode-width 'full
	sml/vc-mode-show-backend t
	projectile-mode-line nil)
  :config
  (sml/setup))

(setq evil-mode-line-format '(before . mode-line-front-space))

(setq-default mode-line-format
	      '("%e"
		mode-line-front-space
		" "
		(eyebrowse-mode
		 (:eval
		  (eyebrowse-mode-line-indicator)))
		mode-line-client
		mode-line-modified
		mode-line-auto-compile
		mode-line-remote
		mode-line-frame-identification
		" "
		mode-line-buffer-identification
		sml/pos-id-separator
		" "
		(vc-mode vc-mode)
		" "
		mode-line-modes
		sml/pre-modes-separator
		mode-line-position
		"(%l:%c)"
		mode-line-end-spaces))
#+END_SRC
*** Hide Mode Line
#+BEGIN_SRC emacs-lisp
(use-package hide-mode-line :ensure t)
#+END_SRC
* Interface
** Completion Framework
*** Ivy
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :demand
  :diminish ivy-mode ivy-minor-mode
  :bind (("C-s" . swiper)
	 ("M-x" . counsel-M-x)
	 ("s-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)
	 ("<f1> l" . counsel-find-library)
	 ("<f1> b" . counsel-descbinds)
	 :map read-expression-map
	 ("C-r" . counsel-expression-history)
	 :map ivy-minibuffer-map
	 ("C-l" . ivy-backward-delete-char))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
	enable-recursive-minibuffers t
	ivy-initial-inputs-alist nil
	ivy-count-format "%d/%d "
	magit-completing-read-function 'ivy-completing-read
	projectile-completion-system 'ivy)
  (my/leader
   '(("ag" . counsel-ag)
     ("`" .  ivy-switch-buffer)
     ("d" .  counsel-yank-pop)
     ("s" .  swiper)
     ("bb" . ibuffer)
     ("p" . projectile-command-map)
     ("i" .  ivy-imenu-anywhere)
     ("fl" . imenu-anywhere)
     ("gg" . counsel-git-grep)
     ("ff" . counsel-find-file))))

(use-package ivy-rich
  :ensure t
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
  (setq ivy-virtual-abbreviate 'full
	ivy-rich-switch-buffer-align-virtual-buffer t)
  (setq ivy-rich-abbreviate-paths t))

;; for edit in C-c C-o
(use-package wgrep :ensure t)

(use-package flx :ensure t)
#+END_SRC
*** Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :bind (:map company-active-map
	      ("C-n" . company-select-next-or-abort)
	      ("C-p" . company-select-previous-or-abort)
	      ("C-h" . company-quickhelp-manual-begin))
  :config
  (global-company-mode)
  (setq my-disabled-company-mode
	'(company-bbdb company-nxml company-css company-semantic company-clang company-xcode))
  (cl-loop for mode in my-disabled-company-mode do
	   (delete mode company-backends)))

(use-package company-quickhelp
  :ensure t
  :config
  (company-quickhelp-mode 1)
  (setq company-quickhelp-delay nil))
#+END_SRC
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets :ensure)
(use-package yasnippet
  :diminish yas-minor-mode
  :ensure t
  :config
  (yas-global-mode 1)
  (my/leader
    '(("yn" . yas-new-snippet)
      ("yv" . yas-visit-snippet-file)
      ("yt" . yas-describe-tables)
      ("yi" . yas-insert-snippet))))
#+END_SRC
*** Auto Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
  :ensure t
  :bind (("C-c ya" . aya-create)
	 ("C-c ye" . aya-expand)))
#+END_SRC
** Window Control
*** Popwin
popup window for better experience
#+BEGIN_SRC emacs-lisp
(use-package popwin
  :ensure t
  :config
  (setq popwin:popup-window-height 15)
  (global-set-key (kbd "C-q") popwin:keymap)
  (define-key popwin:keymap "q" 'popwin:close-popup-window)
  (define-key popwin:keymap "o" 'popwin:original-display-last-buffer)
  (define-key popwin:keymap "p" 'popwin:original-pop-to-last-buffer)
  (popwin-mode 1))

(defvar my:popup-config
  '(("*Backtrace*" :regexp nil)
    ("*warnings*" :regexp nil)
    ("*Youdao Dictionary*" :regexp nil)
    (" *undo-tree*" :position bottom)
    (" *undo-tree Diff*" :position bottom)
    ("*HS-Error*" :position bottom)
    ("*Gofmt Errors*" :position bottom)
    ("*Buffer List*" :position bottom)
    ("*godoc <at point>*" :position bottom)
    ("*Go Test*" :position bottom)
    (vc-mode :noselect nil)
    (compilation-mode :noselect nil)
    (go-guru-output-mode :noselect nil)
    (racer-help-mode :noselect nil)
    (intero-help-mode :noselect nil)
    (helpful-mode :noselect nil)))

(cl-loop for conf in my:popup-config
         do (push conf popwin:special-display-config))
#+END_SRC
*** Eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :init (setq eyebrowse-keymap-prefix (kbd "C-c C-b"))
  :bind (("M-1" . eyebrowse-switch-to-window-config-1)
	 ("M-2" . eyebrowse-switch-to-window-config-2)
	 ("M-3" . eyebrowse-switch-to-window-config-3)
	 ("M-4" . eyebrowse-switch-to-window-config-4)
	 ("M-5" . eyebrowse-switch-to-window-config-5)
	 ("M-6" . eyebrowse-switch-to-window-config-6)
	 ("M-7" . eyebrowse-switch-to-window-config-7)
	 ("M-8" . eyebrowse-switch-to-window-config-8)
	 ("M-9" . eyebrowse-switch-to-window-config-9)
	 ("M-0" . eyebrowse-close-window-config)
	 ("M-]" . eyebrowse-next-window-config)
	 ("M-[" . eyebrowse-prev-window-config))
  :config
  (setq eyebrowse-new-workspace t)
  (eyebrowse-mode t))
#+END_SRC
*** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind (("M-`" . ace-window))
  :config
  (setq aw-scope 'frame))
#+END_SRC
** Editing
*** ISpell
#+BEGIN_SRC emacs-lisp
;; spell check world
(global-set-key (kbd "C-\\") 'ispell-word)
#+END_SRC
*** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :bind (:map paredit-mode-map ("C-j" . eval-print-last-sexp)))

(defvar peter/paredit-modes
  '(emacs-lisp-mode
    eval-expression-minibuffer-setup
    ielm-mode
    lisp-mode
    lisp-interaction-mode
    scheme-mode
    slime-repl-mode))

(cl-loop for mode in peter/paredit-modes
         do (let ((hook (concat (symbol-name mode) "-hook")))
              (add-hook (intern hook) #'paredit-mode)))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :ensure t
  :config
  (smartparens-global-mode t)
  (require 'smartparens-config)
  (setq sp-highlight-pair-overlay 'nil)
  (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp))
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("C-;" . avy-goto-char)
	 :map evil-normal-state-map
	 ("s" . avy-goto-char)
	 ("S" . avy-goto-word-1)))
#+END_SRC
*** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC
*** Visual Regexp Steroids
#+BEGIN_SRC emacs-lisp
(use-package visual-regexp-steroids
  :demand t
  :ensure t
  :bind (:map esc-map
	 ("C-s" . vr/query-replace))
  :config
  (setq vr/auto-show-help nil))
#+END_SRC
** File/Directory
*** Direds/Ranger
#+BEGIN_SRC emacs-lisp
(defun peter/dired-mode-hook ()
  (hl-line-mode)
  (define-key dired-mode-map "l" 'dired-find-file)
  (define-key dired-mode-map "h" 'dired-up-directory)
  (define-key dired-mode-map "j" 'dired-next-line)
  (define-key dired-mode-map "k" 'dired-previous-line))

(add-hook 'dired-mode-hook 'peter/dired-mode-hook)
(add-hook 'dired-mode-hook 'auto-revert-mode)

(defun peter/ranger-mode-hook ()
  (define-key ranger-mode-map "+" 'dired-do-chmod))

(use-package ranger
  :ensure t
  :config
  (ranger-override-dired-mode t)
  (setq ranger-deer-show-details t
        ranger-show-hidden nil
        ranger-cleanup-eagerly t)
  ;; remove conflict bindings
  (cl-loop for x  in (split-string "1 2 3 4 5 6 7 8 9 0")
	 do (define-key ranger-mode-map (kbd (format "M-%s" x)) nil))
  (add-hook 'ranger-mode-hook 'peter/ranger-mode-hook))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (defvar peter/projectile-ignored-directories
      '("node_modules" "Godeps"))
    (projectile-global-mode)
    (cl-loop for dir in peter/projectile-ignored-directories
	     do (add-to-list 'projectile-globally-ignored-directories dir)))
#+END_SRC
*** Fasd
#+BEGIN_SRC emacs-lisp
(defun counsel-fasd-function (str)
  (process-lines "fasd" "-l" str))

(defun counsel-fasd (&optional initial-input)
  "fasd counsel interface"
  (interactive)
  (ivy-read "fasd: " #'counsel-fasd-function
            :initial-input initial-input
            :dynamic-collection t
            :require-match t
            :sort t
            :history 'counsel-fasd
            :action (lambda (str)
                      (if (directory-name-p str)
                          (dired str)
                        (find-file str)))
            :caller 'counsel-fasd))

(use-package fasd
  :ensure t
  :config
  (global-fasd-mode 1)
  (my/leader
    '(("fd" . counsel-fasd))))
#+END_SRC
** Version Control
*** Magit
#+BEGIN_SRC emacs-lisp
;; update version control
(setq auto-revert-check-vc-info t)

(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
  :config
  (setq magit-auto-revert-immediately t)
  (my/leader
    '(("gs" . magit-status))))
#+END_SRC
*** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :config
  (my/leader '(("gm" . git-timemachine))))

(eval-after-load 'git-timemachine
  '(progn
     (evil-make-overriding-map git-timemachine-mode-map 'normal)
     ;; force update evil keymaps after git-timemachine-mode loaded
     (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))
#+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode +1))
#+END_SRC
** Interface Enhancement
*** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful :ensure t)
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :hook ((prog-mode-hook . rainbow-mode)
	 (conf-xdefaults-mode-hook . rainbow-mode))
  :diminish rainbow-mode)
#+END_SRC
*** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree :diminish undo-tree-mode)
#+END_SRC
*** Beacon Mode
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :diminish beacon-mode
  :config
  (beacon-mode 1))
#+END_SRC
*** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (setq which-key-idle-delay 2.5)
  :config
  (which-key-mode))
#+END_SRC
*** Crux
Open file with sudo if needed
#+BEGIN_SRC emacs-lisp
(use-package crux
  :diminish t
  :ensure t
  :config
  (crux-reopen-as-root-mode))
#+END_SRC
*** IBuffer
#+BEGIN_SRC emacs-lisp
(defun peter/ibuffer-mode-hook ()
  (hl-line-mode)
  (define-key ibuffer-mode-map "j" 'ibuffer-forward-line)
  (define-key ibuffer-mode-map "k" 'ibuffer-backward-line))
(add-hook 'ibuffer-mode-hook 'peter/ibuffer-mode-hook)
#+END_SRC
*** IMenu Anywhere
#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere :ensure t)
#+END_SRC
*** Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra :ensure t)
#+END_SRC
*** Bm
bookmark tool
#+BEGIN_SRC emacs-lisp
(use-package bm
  :ensure t
  :bind (("<f2>" . bm-next)
	 ("S-<f2>" . bm-previous)
	 ("C-<f2>" . bm-toggle))
  :config
  (setq bm-cycle-all-buffers t)
  (setq bm-highlight-style 'bm-highlight-only-fringe))
#+END_SRC
*** Discover Major
#+BEGIN_SRC emacs-lisp
(use-package discover-my-major
  :ensure t
  :bind (("C-h m" . discover-my-major)
	 ("C-h C-m" . discover-my-mode)))
#+END_SRC
* Org Mode
** Org Mode General
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("â" "â" "â" "â" "â" "â¯" "â" )))

(global-set-key (kbd "\C-cc") 'org-capture)
(global-set-key (kbd "\C-ca") 'org-agenda)
(global-set-key (kbd "\C-cl") 'org-store-link)

(setq org-startup-indented t)
(setq org-startup-folded t)
(setq org-hide-emphasis-markers t)
(setq org-imenu-depth 5)


(if (string= "xps" (system-name))
    (setq org-image-actual-width 900)
  (setq org-image-actual-width 600))
(setq org-link-frame-setup
      '((file . find-file)
        (vm . vm-visit-folder)))

(eval-after-load 'org-indent '(diminish 'org-indent-mode))

(diminish 'visual-line-mode)

(defun peter/org-mode-hook ()
  (electric-indent-local-mode -1)
  (evil-local-set-key 'normal (kbd "SPC i") 'counsel-org-goto)
  (evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point))

(add-hook 'org-mode-hook 'peter/org-mode-hook)

;; org modules
(add-to-list 'org-modules 'org-habit)
(add-to-list 'org-modules 'org-protocol)
(add-to-list 'org-modules 'org-man)
(add-to-list 'org-modules 'org-timer)

;; load modules
(require 'org-habit)
(require 'org-protocol)
(require 'org-man)
(require 'org-timer)

;; disable time dispaly for mode line compatibility
(setq org-timer-display nil)

;; line wrap in org mode
(add-hook 'org-mode-hook 'visual-line-mode)

;; narrow to subtree after selecting entry in org agenda
(add-hook 'org-clock-goto-hook 'org-narrow-to-subtree)
(advice-add 'org-agenda-switch-to :after #'org-narrow-to-subtree)

;; refresh inline image after evaluate code block
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

;; Org Babel
(setq org-src-window-setup 'current-window)
(setq org-src-preserve-indentation t)
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-support-shift-select 'always)

(org-babel-do-load-languages 'org-babel-load-languages
                             '((shell . t)
			       (gnuplot . t)
                               (octave . t)
                               (dot . t)
			       (plantuml .t)))

(add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC
** Org Agenda
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d)" "CANCELED(c@)")))
(setq org-default-notes-file "~/Sync/org/agenda/inbox.org")
(setq org-archive-location"~/Sync/org/agenda/archive.org::datetree/* Finished Tasks")
(setq org-agenda-files (list "~/Sync/org/agenda/inbox.org"
			     "~/Sync/org/agenda/project.org"))
(setq org-directory "~/Sync/org")
(setq org-agenda-text-search-extra-files '("~/Sync/org/agenda/archive.org"))
(setq org-archive-subtree-add-inherited-tags t)

(setq org-attach-store-link-p 'attached)
(setq org-attach-auto-tag nil)
(setq org-attach-directory "attach/")

(setq org-log-done 'time)
(setq org-log-states-order-reversed nil)
(setq org-agenda-window-setup 'current-window)

;; custom agenda

(setq org-agenda-start-with-log-mode t)
(setq org-agenda-custom-commands
      '(("d" "Agenda Day View"
         ((agenda "" ((org-agenda-span 1)
                      ))))
        ("w" "Agenda Weekly Review"
         ((agenda "" ((org-agenda-span 7)
                      (org-agenda-start-on-weekday 1)
                      (org-agenda-time-grid nil)
                      (org-agenda-repeating-timestamp-show-all t)
                      (org-agenda-clockreport-mode t)))))
        ))

;; org refile
(defun peter/org-buffer-files ()
  "Return list of opened orgmode buffer files"
  (mapcar (function buffer-file-name)
          (org-buffer-list 'files)))

(setq org-refile-targets '((nil :maxlevel . 2)
                           (peter/org-buffer-files :maxlevel . 3)
                           (org-agenda-files :maxlevel . 2)))
;; Refile in a single go
(setq org-outline-path-complete-in-steps nil)
;; Show full paths for refiling
(setq org-refile-use-outline-path t)

(defun peter/agenda-mode-config ()
  "agenda mode key bindings and config"
  (hide-mode-line-mode)
  (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
  (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)
  (define-key org-agenda-mode-map "g" 'org-agenda-goto-date)
  (define-key org-agenda-mode-map "n" 'org-agenda-capture)
  (define-key org-agenda-mode-map "p" 'org-mobile-push)
  (define-key org-agenda-mode-map "P" 'org-mobile-pull)
  (define-key org-agenda-mode-map (kbd "SPC") peter/leader-map)
  (define-key org-agenda-mode-map (kbd "C-e") 'evil-scroll-line-down)
  (define-key org-agenda-mode-map (kbd "C-y") 'evil-scroll-line-up)
  (hl-line-mode))

(add-hook 'org-agenda-mode-hook 'peter/agenda-mode-config)

;; org mobile
(setq org-mobile-inbox-for-pull "~/Sync/org/agenda/inbox.org")
(setq org-mobile-directory "~/Sync/org/mobile")

;; org timer
(setq org-clock-mode-line-total 'current)

(defun polybar-clock ()
  (if (org-clocking-p)
      (substring-no-properties (org-clock-get-clock-string)) ""))

(defun polybar-timer ()
  (if (eq org-timer-countdown-timer 'nil)
      ""
    (org-timer-value-string)))

(defun polybar-pomodoro ()
  (interactive)
  (format "%s %s" (polybar-timer) (polybar-clock)))
#+END_SRC
** Org Caputre
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("i" "Inbox" entry (file "~/Sync/org/agenda/inbox.org")
         "* TODO %?\n %i\n")
        ("j" "Journal" entry (file+olp+datetree "~/Sync/org/agenda/archive.org")
         "* %? :journal: \nEntered on %U\n %i\n")
        ("p" "org-protocol" entry (file "~/Sync/org/agenda/inbox.org")
         "* %:description\n=Source=: %:link\n#+BEGIN_QUOTE\n%:initial\n#+END_QUOTE"
         :empty-line 1)
        ("L" "org-protocol-link" entry (file "~/Sync/org/agenda/inbox.org")
         "* [[%:link][%:description]]\n"
         :empty-line 1)
        ))

(defvar peter/org-refile-index 0
  "Indicator for org-caputre-refile, if 0 delete frame if 1 no delete ")

(advice-add 'org-capture-refile :before '(lambda () (setq peter/org-refile-index 1)))
(advice-add 'org-capture-refile :after '(lambda ()
                                          (setq peter/org-refile-index 0)
                                          (peter/org-capture-delete-frame)))

(defun peter/org-capture-window ()
  (if (equal "org-agenda" (frame-parameter nil 'name))
      (delete-other-windows)))

(defun peter/org-capture-delete-frame ()
  (if (and (equal peter/org-refile-index 0)
           (equal "org-agenda" (frame-parameter nil 'name)))
      (delete-frame)))

(add-hook 'org-capture-after-finalize-hook 'peter/org-capture-delete-frame)
(add-hook 'org-capture-mode-hook 'peter/org-capture-window)

;; org download
(use-package org-download
  :demand t
  :ensure t
  :bind (:map org-mode-map
	      ("C-c d s" . org-download-screenshot)
	      ("C-c d d" . org-download-delete)
	      ("C-c d e" . org-download-edit)
	      ("C-c d y" . org-download-yank))
  :config
  (setq org-download-image-html-width 500)
  (setq org-download-image-latex-width 500)
  (setq org-download-method 'attach)
  (setq org-download-screenshot-method "maim -s %s")
  (setq org-download-edit-cmd "krita %s"))
#+END_SRC
** Org Export
*** Org Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
(use-package org-mime :ensure t)
(setq org-mime-library 'mml)
(add-hook 'message-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
(add-hook 'org-mode-hook
          (lambda ()
            (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))
(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                           "#E6E1DC" "#232323"))))
(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))
#+END_SRC
*** Org Latex
#+BEGIN_SRC emacs-lisp
;; inline latex fragment
(plist-put org-format-latex-options :scale 2)

(setq org-export-with-toc nil
      org-export-with-entities nil
      org-export-with-section-numbers nil
      org-export-with-todo-keywords nil)

(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq tex-compile-commands '(("xelatex %r")))
(setq tex-command "xelatex")
(setq-default TeX-engine 'xelatex)
#+END_SRC
*** Org Publish
#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :ensure t
  :config
  (setq org-publish-project-alist
	'(("org-wiki"
	   :base-directory "~/Sync/org/wiki/"
	   :publishing-directory "~/Desktop/wiki/"
	   :publishing-function org-twbs-publish-to-html
	   :with-sub-superscript nil))))
#+END_SRC
** Org Wiki
#+BEGIN_SRC emacs-lisp :tangle (if (file-exists-p "~/Sync") "yes" "no")
(load (concat user-emacs-directory "site-lisp/wiki/wiki.el"))
(require 'wiki)
(setq wiki-location "~/Sync/org/wiki/")
(my/leader '(("as" . wiki-search)
	     ("ae" . wiki-goto)
	     ("aj" . org-clock-goto)))
#+END_SRC
* Programming Languages
** Documents
#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :ensure t
  :bind (("C-h d" . helm-dash-at-point)
	 ("C-h C-d" . helm-dash)))
#+END_SRC
** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-sandbox :ensure t)
(use-package nix-mode :ensure t)

(add-hook 'comint-mode-hook 'nix-prettify-mode)

(setq last-nix-command "make")

(defun nix-run (command)
  (interactive
   (list (read-string "nix shell command: " last-nix-command nil last-nix-command)))
  (setq last-nix-command command)
  (nix-compile
   (nix-current-sandbox)
   (concat "cd " (projectile-project-root) ";" command)))
#+END_SRC
** C/C++
for this to work =shell.nix= must have ~llvm~ in buildinputs
better to use ~clangStdenv~
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode :ensure t
  :config
  (require 'lsp-imenu))

(use-package company-lsp
  :ensure t
  :config
  (push 'company-lsp company-backends)
  (setq company-lsp-async t
	company-lsp-cache-candidates nil
	company-transformers nil))

(use-package cquery
  :ensure t
  :config
  (setq cquery-executable "cquery")
  (setq cquery-extra-init-params
	'(:index (:comments 2)
		 :cacheFormat "msgpack"
		 :completion (:detailedLabel t))))

(use-package google-c-style :ensure t)

(defun peter/c-mode-hook ()
  (setq-local helm-dash-docsets '("C++"))
  (google-set-c-style)
  (google-make-newline-indent)
  (lsp-enable-imenu)
  (rainbow-mode -1)
  (crux-reopen-as-root-mode -1)
  (local-set-key [f5] 'nix-run)
  (local-set-key (kbd "C-c C-j") 'xref-find-definitions)
  (local-set-key (kbd "C-c C-f") 'lsp-format-buffer)
  (local-set-key (kbd "C-c C-d") 'helm-dash-at-point)
  (local-set-key (kbd "C-c C-c") 'lsp-cquery-enable)
  (local-set-key (kbd "C-c C-l") 'cquery-freshen-index)
  (local-set-key (kbd "C-c C-r") 'lsp-restart-workspace)
  (local-set-key (kbd "C-c r") 'lsp-rename))

(add-hook 'c-mode-common-hook 'peter/c-mode-hook)

;; auto indent bracket
(sp-local-pair 'c++-mode "{" nil
	       :post-handlers '((my-create-newline-and-enter-sexp "RET")))

(defun my-create-newline-and-enter-sexp (&rest _ignored)
  "Open a new brace or bracket expression, with relevant newlines and indent. "
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(setq gdb-many-windows t)

;; cmode
(defun peter/c-mode-manual ()
  (interactive)
  (man (format "3 %s" (symbol-at-point))))

(add-hook 'c-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c C-d") 'peter/c-mode-manual)))
#+END_SRC
** CMake
#+BEGIN_SRC emacs-lisp
(defun peter/cmake-hook ()
  (let ((cmake-path (nix-executable-find (nix-current-sandbox) "cmake")))
    (setq cmake-mode-cmake-executable cmake-path)
    (setq company-cmake-executable cmake-path)))

(use-package cmake-mode
  :ensure t
  :config
  (when (executable-find "nix-env")
    (add-hook 'cmake-mode-hook 'peter/cmake-hook)))
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(use-package gorepl-mode
  :ensure t
  :diminish gorepl-mode
  :config
  (add-hook 'go-mode-hook #'gorepl-mode))

(use-package company-go
  :ensure t
  :init
  (progn
    (setq company-go-show-annotation nil)))

(use-package gotest
  :ensure t)

(use-package go-guru
  :ensure t
  :config
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

(use-package go-playground :ensure t)

(use-package go-rename :ensure t)

(use-package go-eldoc
  :ensure t
  :diminish eldoc-mode
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))

(defun peter/go-mode-hook ()
  (interactive)
  (setq-local helm-dash-docsets '("Go"))
  (local-set-key (kbd "C-c C-d") 'godoc-at-point)
  (local-set-key (kbd "C-c r") 'go-rename)
  (local-set-key (kbd "C-c g") 'go-playground)
  (local-set-key (kbd "C-c C-k") 'go-playground-rm)
  (local-set-key [f5] 'peter/go-install-or-run))

(defun peter/go-install-or-run ()
  (interactive)
  (cond ((bound-and-true-p go-playground-mode)
         (go-playground-exec))
        ((string= (buffer-substring-no-properties 1 13) "package main")
         (go-run))
        (t (compile "go install"))))

(use-package go-mode
  :ensure t
  :config
  (setq go-playground-basedir "~/golang/src/playground")
  (setq gofmt-command "goimports")
  (setq godoc-at-point-function 'godoc-gogetdoc)
  (add-hook 'go-mode-hook 'peter/go-mode-hook)
  (add-hook 'before-save-hook 'gofmt-before-save)
  (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go company-files))
                            (company-mode))))

(use-package flycheck-gometalinter
  :ensure t
  :config
  (flycheck-gometalinter-setup))
#+END_SRC
** COMMENT TypeScript
#+BEGIN_SRC emacs-lisp
(use-package tide
  :ensure t
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (local-set-key (kbd "C-c C-j") 'tide-jump-to-definition)
    (local-set-key (kbd "C-c C-f") 'tide-format))
  (add-hook 'typescript-mode-hook #'setup-tide-mode))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :init
  (setq-default indent-tabs-mode nil)
  :config
  (setq python-indent-offset 4)
  (add-hook 'python-mode-hook 'smartparens-mode))

(use-package elpy
  :ensure t
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))
  :bind (:map elpy-mode-map
	      ("C-c C-j" . elpy-goto-definition))
  :config
  (setq elpy-company-post-completion-function 'ignore)
  (setq elpy-modules
	'(elpy-module-sane-defaults
	  elpy-module-company
	  elpy-module-eldoc
	  elpy-module-yasnippet))
  (elpy-enable))
#+END_SRC
** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :diminish rainbow-delimiters-mode
  :hook (emacs-lisp-mode-hook . rainbow-delimiters-mode)
  :ensure t)
#+END_SRC
** Rust
Rust-mode dependencies
#+BEGIN_SRC sh :result no
cargo install racer
cargo install rustfmt
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :config
  (setq rust-format-on-save t)
  (add-hook 'rust-mode-hook #'racer-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (define-key rust-mode-map (kbd "C-c C-j") #'racer-find-definition)
  (define-key rust-mode-map (kbd "C-c C-d") #'racer-describe)
  (setq company-tooltip-align-annotations t))

(use-package racer
  :ensure t
  :config
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))

(use-package cargo
  :ensure t
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

(use-package toml-mode
  :ensure t)
#+END_SRC
** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime-company :ensure t)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "sbcl")
  (setq slime-contribs '(slime-fancy))
  (slime-setup '(slime-fancy slime-company)))
#+END_SRC
** Octave
#+BEGIN_SRC emacs-lisp
(use-package octave
  :mode ("\\.m\\'" . octave-mode)
  :bind (:map octave-mode-map
	      ("C-c C-d" . octave-help)
	      ("C-c C-c" . octave-send-buffer)
	      ("C-c g" . run-octave)))
#+END_SRC
** Haskell intero
nixos config
install intero in directory =~/.stack/global-project/=
~$HOME/.stack/config.yaml~
#+BEGIN_SRC yaml
  nix:
    enable: true
#+END_SRC

~$HOME/.stack/global-project/stack.yaml~
#+BEGIN_SRC yaml
flags: {}
extra-package-dbs: []
packages: []
extra-deps: []
resolver: lts-9.6
nix:
  packages:
    - libcxx
    - icu
    - gcc
    - ncurses
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package intero
  :ensure t
  :bind (:map intero-mode-map
	      ("C-c C-d" . intero-info)
	      ("C-c C-j" . intero-goto-definition))
  :config
  (intero-global-mode 1))
#+END_SRC
* Utilities
** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :magic ("%PDF" . pdf-view-mode)
  :hook ((pdf-view-mode pdf-outline-buffer-mode) . hide-mode-line-mode)
  :bind (:map pdf-view-mode-map
	      ("C-s" . isearch-forward)
	      ("j" . pdf-view-next-line-or-next-page)
	      ("k" . pdf-view-previous-line-or-previous-page)
	      ("r" . tts/pdf-read-page)
	      ("d" . peter/pdf-dict)
	      ("TAB" . pdf-outline)
	      :map pdf-outline-buffer-mode-map
	      ("j" . next-line)
	      ("k" . previous-line)
	      ("RET" . pdf-outline-follow-link-and-quit))
  :config
  (pdf-tools-install)
  (define-key pdf-view-mode-map (kbd "SPC") peter/leader-map))

(use-package org-noter
  :ensure t
  :hook (org-noter-doc-mode . hide-mode-line-mode)
  :config
  (setq org-noter-always-create-frame nil))
#+END_SRC
** Mail
*** Send Mail
#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'message-send-mail-with-sendmail)
(setq sendmail-program "msmtp")
(setq message-sendmail-extra-arguments '("--read-envelope-from"))
(setq message-sendmail-f-is-evil 't)

(require 'gnus-dired)

(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                   (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC
*** Mu4e
nixos workaround
#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "nix-env") "yes" "no")
;; nixos add to load path
(let ((mu4epath
       (concat
        (f-dirname
         (file-truename
          (executable-find "mu")))
        "/../share/emacs/site-lisp/mu4e")))
  (when (and
         (string-prefix-p "/nix/store/" mu4epath)
         (file-directory-p mu4epath))
    (add-to-list 'load-path mu4epath)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "mu") "yes" "no")
(use-package evil-mu4e :ensure t)

(require 'mu4e)

(require 'org-mu4e)

(my/leader '(("0" . mu4e)))

(add-to-list 'mu4e-view-actions
             '("browser" . mu4e-action-view-in-browser) t)

(setq mu4e-maildir "~/.mail")

(setq mu4e-sent-messages-behavior 'delete)

(setq mu4e-maildir-shortcuts
      '( ("/sina/Inbox"            . ?a)
         ("/qq/Inbox"              . ?q)
         ("/icloud/Inbox"         . ?c)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "mbsync -a")

(setq
 user-mail-address "378096232@qq.com"
 user-full-name  "Peter Zheng"
 mu4e-compose-signature
 (concat
  "Peter Zheng "
  "peter.zky@qq.com"))

(setq message-kill-buffer-on-exit t)
(setq mu4e-view-show-images t)
(setq mu4e-html2text-command "w3m -T text/html")

(setq mu4e-use-fancy-chars t)
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-headers-skip-duplicates t)

(add-hook 'mu4e-main-mode-hook #'mu4e-update-index)
#+END_SRC
** ElFeed
#+BEGIN_SRC emacs-lisp
(defun peter/elfeed-load-db-and-open ()
  "Wrapper to load the elfeed db from disk before opening"
  (interactive)
  (elfeed-db-load)
  (elfeed)
  (elfeed-search-update--force))

(defun peter/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

(defun peter/elfeed-mark-all-as-read ()
  "Mark all as read in current context."
  (interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))

(defun elfeed-search-mpv ()
  "browse url with mpv with tmux"
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (browse-url-mpv it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line)))
  (message "view with mpv"))


(defun browse-url-mpv (url)
  (interactive)
  (call-process-shell-command
   (format "tmux new-window -n mpv \"http_proxy=http://127.0.0.1:8123 https_proxy=http://127.0.0.1:8123 mpv --ytdl-format mp4 '%s'\"" url) nil 0))


(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
	      ("j" . next-line)
	      ("k" . previous-line)
	      ("q" . peter/elfeed-save-db-and-bury)
	      ("R" . peter/elfeed-mark-all-as-read)
	      ("v" . elfeed-search-mpv)
	      :map elfeed-show-mode-map
	      ("j" . scroll-up-line)
	      ("k" . scroll-down-line))
  :config
  (my/leader '(("9" . peter/elfeed-load-db-and-open)))
  (setq elfeed-curl-extra-arguments '("-x" "http://127.0.0.1:8123"))
  (setq elfeed-db-directory "~/Sync/elfeed")
  (defun my-elfeed-tag-sort (a b)
    (let* ((a-tags (format "%s" (elfeed-entry-tags a)))
	   (b-tags (format "%s" (elfeed-entry-tags b)))
	   (a-feed (format "%s" (elfeed-entry-feed a)))
	   (b-feed (format "%s" (elfeed-entry-feed b))))
      (if (string= a-tags b-tags)
	  (if (string= a-feed b-feed)
	      (< (elfeed-entry-date b) (elfeed-entry-date a))
	    (string< a-feed b-feed))
      (string< a-tags b-tags))))

  (setf elfeed-search-sort-function #'my-elfeed-tag-sort))

(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org))
#+END_SRC
** Yadm
Prerequisite: yadm version >= 1.0.8
access yadm repo via tramp
#+BEGIN_SRC emacs-lisp
(add-to-list 'tramp-methods
	     '("yadm"
	       (tramp-login-program "yadm")
	       (tramp-login-args (("enter")))
	       (tramp-login-env
		(("SHELL")
		 ("/bin/sh")))
	       (tramp-remote-shell "/bin/sh")
	       (tramp-remote-shell-login
		("-l"))
	       (tramp-remote-shell-args
		("-c"))
	       (tramp-connection-timeout 10)))


(defun reopen-as-yadm ()
  (interactive)
  (fasd-add-file-to-db)
  (unless (file-remote-p (buffer-file-name))
    (find-alternate-file
     (concat "/yadm:" (getenv "USER") "@localhost:" buffer-file-name))))
#+END_SRC
** Terminal Here
#+BEGIN_SRC emacs-lisp
(use-package terminal-here
  :ensure t
  :config
  (when (string= system-type "gnu/linux")
    (setq terminal-here-terminal-command '("urxvt")))
  (my/leader '(("t" . terminal-here))))
#+END_SRC
** Shell Pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :ensure t
  :bind (("C-`" . shell-pop))
  :config
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (setq shell-pop-term-shell "zsh")
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC
** Chinese Support
*** Youdao Dictionary
#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :config
  (my/leader '(("oo" . youdao-dictionary-search-at-point+))))

(defun peter/pdf-dict ()
  "pdf-tool dict"
  (interactive)
  (pdf-view-kill-ring-save)
  (let ((word (substring-no-properties (car kill-ring))))
    (youdao-dictionary-search word))
  (pdf-view-deactivate-region))
#+END_SRC
*** Fcitx
#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "fcitx-remote") "yes" "no")
(use-package fcitx
  :ensure t
  :config
  (setq fcitx-use-dbus t)
  (setq fcitx-active-evil-states '(insert emacs hydrid))
  (fcitx-org-speed-command-turn-on)
  (fcitx-aggressive-minibuffer-turn-off)
  (fcitx-aggressive-setup))
#+END_SRC
** RESTClient
#+BEGIN_SRC emacs-lisp
(use-package restclient :ensure t)
#+END_SRC
** Ranger Select
#+BEGIN_SRC emacs-lisp :tangle (if (executable-find "urxvt") "yes" "no")
(defun ranger-select (prompt &optional dir default-filenamme mustmatch initial predicate)
  "select file with ranger"
  (interactive)
  (call-process-shell-command
   (concat "urxvt -name rangerFloat -e ranger --choosefiles=/tmp/ranger_current_file " dir))
  (with-temp-buffer
    (insert-file-contents "/tmp/ranger_current_file")
    (car (split-string (buffer-string) "\n" t))))

					;(fset 'read-file-name 'ranger-select)
(defun my-ranger-advice (orig-function &rest arguments)
  "advice read-file-name function to ranger-select"
  (interactive)
  (cl-letf (((symbol-function 'read-file-name) 'ranger-select))
    (if (called-interactively-p 'any)
	(call-interactively orig-function)
      (apply orig-function arguments))))

;; advice org-attach
(eval-after-load "org-attach"
  (advice-add 'org-attach-attach :around #'my-ranger-advice))

;; mml-attach-file
(eval-after-load "mml"
  (advice-add 'mml-attach-file :around #'my-ranger-advice))

;; org-download
(defun my:org-download-insert-image ()
  (interactive)
  (org-download-image (ranger-select "image: ")))

(define-key org-mode-map (kbd "C-c d i") 'my:org-download-insert-image)
#+END_SRC
** RipGrep
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure t
  :bind (:map rg-global-map
	      ("n" . rg-search-nix))
  :config
  (define-key peter/leader-map (kbd "ar") rg-global-map)
  (rg-define-search rg-search-nix
    "search nix files"
    :qusery ask
    :format regexp
    :files "nix"
    :dir "/nix/var/nix/profiles/per-user/root/channels/nixos"))
#+END_SRC
** TTS - Text to Speech
#+BEGIN_SRC emacs-lisp
(defun tts/read-paragraph ()
  "read paragraph with tts"
  (interactive)
  (save-mark-and-excursion
   (mark-paragraph)
   (kill-ring-save
    (region-beginning)
    (region-end))
   (let ((text (substring-no-properties (car kill-ring))))
     (call-process-shell-command (format "tts -t '%s'&" text) nil 0))))

(defun tts/pdf-read-page ()
  "read whole page or selected region in pdf mode"
  (interactive)
  (save-mark-and-excursion
   (unless (pdf-view-active-region-p)
     (pdf-view-mark-whole-page))
   (pdf-view-kill-ring-save)
   (let ((text (substring-no-properties (car kill-ring))))
     (call-process-shell-command (format "tts -t '%s'&" text) nil 0))))

(defun tts/read-paragraph-forward ()
  (interactive)
  (tts/read-paragraph)
  (forward-paragraph))

(defhydra hydra-tts-menu ()
  ("j" forward-paragraph)
  ("u" scroll-down-command)
  ("]" Info-forward-node)
  ("[" Info-backward-node)
  ("f" scroll-up-command)
  ("k" backward-paragraph)
  ("i" tts/read-paragraph "read paragraph")
  ("SPC" tts/read-paragraph-forward "read forward"))
#+END_SRC
* Etc
#+BEGIN_SRC emacs-lisp
(diminish 'auto-revert-mode)

(use-package abbrev
  :diminish abbrev-mode)

(use-package graphviz-dot-mode :ensure t)

(use-package yaml-mode :ensure t)

;; must have anki-connect plugin installed!
(use-package anki-editor :ensure t)
#+END_SRC
